{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li>test1</li> <li>test2</li> <li>tesdt3</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"C%26CPP%20Debug%E7%AC%94%E8%AE%B0/","title":"C&CPP Debug\u7b14\u8bb0","text":""},{"location":"C%26CPP%20Debug%E7%AC%94%E8%AE%B0/#segmentation-fault-core-dumped","title":"\u5982\u4f55\u4f7f\u7528\u8c03\u8bd5\u5668\u6765\u5b9a\u4f4d\u548c\u4fee\u590d\"Segmentation fault (core dumped)\"\u9519\u8bef\uff1f","text":"<p>\u4f7f\u7528\u8c03\u8bd5\u5668\uff08\u4f8b\u5982 GDB \u5728 Linux \u4e2d\uff09\u6765\u5b9a\u4f4d\u548c\u4fee\u590d\"Segmentation fault (core dumped)\"\u9519\u8bef\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u65b9\u6cd5\u3002\u4ee5\u4e0b\u662f\u4e00\u4e9b\u57fa\u672c\u6b65\u9aa4\uff1a</p> <ol> <li>\u7f16\u8bd1\u4f60\u7684\u7a0b\u5e8f\u4ee5\u5305\u542b\u8c03\u8bd5\u4fe1\u606f\u3002\u5728\u4f7f\u7528 gcc \u7f16\u8bd1\u4f60\u7684\u7a0b\u5e8f\u65f6\uff0c\u53ef\u4ee5\u6dfb\u52a0 <code>-g</code> \u9009\u9879\u6765\u751f\u6210\u8c03\u8bd5\u4fe1\u606f\uff1a</li> </ol> <p><code>bash     gcc -g myprogram.c -o myprogram</code></p> <pre><code>\u8fd9\u5c06\u751f\u6210\u4e00\u4e2a\u540d\u4e3a `myprogram` \u7684\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u6e90\u4ee3\u7801\u7684\u884c\u4fe1\u606f\uff0c\u8fd9\u4f7f\u5f97 GDB \u53ef\u4ee5\u663e\u793a\u6e90\u4ee3\u7801\u884c\u4fe1\u606f\u3002\n</code></pre> <ol> <li>\u8fd0\u884c GDB\u3002\u5728\u547d\u4ee4\u884c\u4e2d\u952e\u5165 <code>gdb</code>\uff0c\u540e\u9762\u8ddf\u4e0a\u4f60\u7684\u7a0b\u5e8f\u540d\uff1a</li> </ol> <p><code>bash     gdb myprogram</code></p> <pre><code>\u8fd9\u5c06\u542f\u52a8 GDB\uff0c\u5e76\u52a0\u8f7d\u4f60\u7684\u7a0b\u5e8f\u3002\n</code></pre> <ol> <li>\u8fd0\u884c\u4f60\u7684\u7a0b\u5e8f\u3002\u5728 GDB \u63d0\u793a\u7b26\u4e0b\uff0c\u952e\u5165 <code>run</code>\uff08\u6216\u7b80\u5199\u4e3a <code>r</code>\uff09\u4ee5\u5f00\u59cb\u8fd0\u884c\u4f60\u7684\u7a0b\u5e8f\uff1a</li> </ol> <p><code>bash     (gdb) run</code></p> <pre><code>\u5982\u679c\u4f60\u7684\u7a0b\u5e8f\u9700\u8981\u547d\u4ee4\u884c\u53c2\u6570\uff0c\u53ef\u4ee5\u5728 `run` \u547d\u4ee4\u540e\u9762\u6dfb\u52a0\u8fd9\u4e9b\u53c2\u6570\u3002\n</code></pre> <ol> <li>\u5f53\u7a0b\u5e8f\u51fa\u73b0\u6bb5\u9519\u8bef\u65f6\uff0cGDB \u5c06\u505c\u6b62\u5e76\u663e\u793a\u4e00\u6761\u6d88\u606f\u3002\u8fd9\u65f6\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 <code>backtrace</code>\uff08\u6216\u7b80\u5199\u4e3a <code>bt</code>\uff09\u547d\u4ee4\u6765\u663e\u793a\u51fd\u6570\u8c03\u7528\u5806\u6808\uff1a</li> </ol> <p><code>bash     (gdb) backtrace</code></p> <pre><code>\u8fd9\u5c06\u663e\u793a\u51fa\u5bfc\u81f4\u6bb5\u9519\u8bef\u7684\u51fd\u6570\u8c03\u7528\u5e8f\u5217\u3002\u6700\u9876\u90e8\u7684\u51fd\u6570\u8c03\u7528\u662f\u6700\u540e\u53d1\u751f\u7684\uff0c\u4e5f\u5c31\u662f\u5bfc\u81f4\u6bb5\u9519\u8bef\u7684\u5730\u65b9\u3002\n</code></pre> <ol> <li>\u67e5\u770b\u6e90\u4ee3\u7801\u548c\u53d8\u91cf\u503c\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 <code>list</code>\uff08\u6216\u7b80\u5199\u4e3a <code>l</code>\uff09\u547d\u4ee4\u6765\u67e5\u770b\u6e90\u4ee3\u7801\uff0c\u4f7f\u7528 <code>print</code>\uff08\u6216\u7b80\u5199\u4e3a <code>p</code>\uff09\u547d\u4ee4\u6765\u67e5\u770b\u53d8\u91cf\u503c\uff1a</li> </ol> <p><code>bash     (gdb) list     (gdb) print myvariable</code></p> <ol> <li>\u4fee\u590d\u4f60\u7684\u4ee3\u7801\u3002\u6839\u636e GDB \u7684\u8f93\u51fa\uff0c\u4f60\u5e94\u8be5\u80fd\u627e\u51fa\u5bfc\u81f4\u6bb5\u9519\u8bef\u7684\u4ee3\u7801\u884c\u548c\u53d8\u91cf\u3002\u4fee\u590d\u8fd9\u4e9b\u95ee\u9898\uff0c\u7136\u540e\u91cd\u65b0\u7f16\u8bd1\u548c\u8fd0\u884c\u4f60\u7684\u7a0b\u5e8f\uff0c\u5982\u679c\u8fd8\u6709\u5176\u4ed6\u7684\u95ee\u9898\uff0c\u91cd\u590d\u4e0a\u8ff0\u6b65\u9aa4\u3002</li> </ol> <p>\u8bb0\u4f4f\uff0c\"Segmentation fault (core dumped)\"\u901a\u5e38\u662f\u7531\u4e8e\u5c1d\u8bd5\u8bbf\u95ee\u975e\u6cd5\u5185\u5b58\uff08\u5982\u89e3\u5f15\u7528\u7a7a\u6307\u9488\uff0c\u8bbf\u95ee\u6570\u7ec4\u8d8a\u754c\u7b49\uff09\u5bfc\u81f4\u7684\u3002\u5728\u4f60\u7684\u4ee3\u7801\u4e2d\u5bfb\u627e\u8fd9\u7c7b\u95ee\u9898\uff0c\u5e76\u5c1d\u8bd5\u7406\u89e3\u4e3a\u4f55\u4f1a\u5c1d\u8bd5\u8bbf\u95ee\u8fd9\u4e9b\u975e\u6cd5\u5185\u5b58\u3002</p>"},{"location":"CLion%E9%85%8D%E7%BD%AE/","title":"CLion\u914d\u7f6e","text":"<p>windows \u7cfb\u7edf\u4e0b\uff0cCLion \u5728 debug \u7684\u65f6\u5019\uff0cprintf \u4e0d\u4f1a\u5b9e\u65f6\u8f93\u51fa\uff0c\u5728\u7a0b\u5e8f\u7ed3\u675f\u540e\u624d\u4f1a\u8f93\u51fa\u3002 \u89e3\u51b3\u529e\u6cd5\uff1a\u5728\u4e3b\u7a0b\u5e8f main \u5f00\u59cb\u65f6\u5019\u7981\u7528\u7f13\u51b2\u533a\uff0c\u589e\u52a0\u4e00\u884c\u4ee3\u7801\uff0c<code>setbuf (stdout, NULL)</code></p> <p>\u5b98\u65b9\u53c2\u8003\u6587\u6863\uff1aCUDA projects | CLion Documentation</p>"},{"location":"CLion%E9%85%8D%E7%BD%AE/#_1","title":"\u914d\u7f6e\u670d\u52a1\u5668","text":"<p>\u53c2\u8003\uff1a Lab 0: \u642d\u5efaCLion\u8fdc\u7a0b\u8c03\u8bd5\u5f00\u53d1\u73af\u5883 - \u77e5\u4e4e \u5176\u4e2d\uff0c\u5c06 Remote \u7684\u73af\u5883\u79fb\u5230\u6700\u4e0a\u7aef\u540e\u4f1a\u6210\u4e3a\u9ed8\u8ba4\uff08default\uff09\u7684\u90e8\u7f72 </p> <p>\u914d\u7f6e CMake \u7684\u65f6\u5019\u53ef\u4ee5\u76f4\u63a5\u9009\u62e9\u8fdc\u7a0b\u5de5\u5177\u94fe\uff0c\u5982\u679c\u5df2\u7ecf\u5c06\u8fdc\u7a0b\u5de5\u5177\u94fe\u79fb\u52a8\u5230\u6700\u4e0a\u7aef\uff0c\u9009\u62e9\u9ed8\u8ba4\u5de5\u5177\u94fe\u4e5f\u5c31\u662f\u9009\u62e9\u4e86\u8fdc\u7a0b\u5de5\u5177\u94fe\u3002 </p> <p>\u6309\u4e24\u4e0b shift \u6309\u952e\u5373\u53ef\u5f00\u542f\u5168\u5c40\u641c\u7d22\uff0c\u641c\u7d22 Remote Host \u540e\u53ef\u4ee5\u5f39\u51fa\u8fdc\u7a0b\u6587\u4ef6\u5939\uff0c\u76f4\u63a5\u70b9\u51fb\u8fdc\u7aef\u6587\u4ef6\uff0c\u7136\u540e\u4fee\u6539\u540e\u91cd\u65b0\u4e0a\u4f20\u5230\u8fdc\u7aef\u670d\u52a1\u5668\u518d\u8fd0\u884c </p>"},{"location":"CLion%E9%85%8D%E7%BD%AE/#windows-powershell","title":"Windows Powershell \u62a5\u9519","text":"<p>\u89e3\u51b3\u529e\u6cd5\uff1a 1. win10 \u4ee5\u7ba1\u7406\u5458\u8eab\u4efd\u6253\u5f00 Windows Powershell 2. \u5728 Powershell \u5185\u8f93\u5165\uff1a</p> <pre><code>get-ExecutionPolicy   # \u67e5\u770b\u7cfb\u7edf\u6267\u884c\u7b56\u7565\u72b6\u6001\nset-executionpolicy remotesigned # \u4fee\u6539\u6267\u884c\u7b56\u7565\u72b6\u6001\n</code></pre> <ol> <li>\u5173\u95ed Windows Powershell \u91cd\u65b0\u6253\u5f00\u5373\u53ef</li> </ol>"},{"location":"Linux%20C%2B%2B%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","title":"Linux C++\u5f00\u53d1\u73af\u5883\u642d\u5efa","text":""},{"location":"Linux%20C%2B%2B%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#_1","title":"\u5de5\u5177\u94fe\u642d\u5efa","text":""},{"location":"Linux%20C%2B%2B%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#_2","title":"\u5b89\u88c5\u7f16\u8bd1\u8c03\u8bd5\u5de5\u5177","text":"<p>\u5b89\u88c5\u547d\u4ee4\u5982\u4e0b\uff1a</p> <pre><code>sudo apt update\nsudo apt install gcc g++\nsudo apt install gdb\n</code></pre> <p>\u9a8c\u8bc1\u73af\u5883\u662f\u5426\u5b89\u88c5\u6210\u529f\uff1a</p> <pre><code>#include&lt;iostream&gt;\nint main()\n{\n    std::cout &lt;&lt; \"Hello World From CXX\" &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre> <p>\u7f16\u8bd1\u8fd0\u884c\uff1a</p> <pre><code>g++ hello.cpp -o hello_cpp\n./hello_cpp\n</code></pre>"},{"location":"Linux%20C%2B%2B%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#_3","title":"\u5b89\u88c5\u9879\u76ee\u6784\u5efa\u5de5\u5177","text":"<p>\u5b89\u88c5 CMake \u524d\u9700\u8981\u5148\u5b89\u88c5 make\uff1a <code>sudo apt install make</code></p> <p>\u67e5\u770b cmake \u7248\u672c</p> <pre><code>cmake --version\n</code></pre> <p>\u6ce8\u610f\uff1a <code>sudo apt install make cmake</code> \u5b89\u88c5\u7684 cmake \u7248\u672c\u4e00\u822c\u5f88\u4f4e\uff0c\u6240\u4ee5\u4e0d\u7528\u8fd9\u4e2a\u65b9\u6cd5\u5b89\u88c5\uff0c\u5982\u679c\u5df2\u7ecf\u5b89\u88c5\u4e86\u4f4e\u7248\u672c\u7684 cmake\uff0c\u7528\u4e0b\u9762\u7684\u6307\u4ee4\u5378\u8f7d\uff1a</p> <pre><code>sudo apt -y remove cmake\n</code></pre> <p>\u53bb\u5b98\u7f51\u4e0a\u4e0b\u8f7d cmake \u7684\u5b89\u88c5\u5305\uff1aDownload | CMake\uff0c\u7136\u540e\u6267\u884c\u4e0b\u9762\u6307\u4ee4</p> <pre><code>sudo tar -zxvf  cmake-3.27.1.tar.gz\ncd cmake-3.27.1\nsudo apt-get -y install libssl-dev\nsudo ./configure\nsudo make -j8\nsudo make install\n</code></pre> <p>\u8865\u5145\uff1a\u4e0b\u9762\u8fd9\u4e2a\u62a5\u9519\u662f\u56e0\u4e3a\u6211\u6700\u5f00\u59cb\u5728\u865a\u62df\u673a\u4e2d\u6784\u5efa\u7684\u65f6\u5019\u9009\u62e9\u4e86 16 \u7ebf\u7a0b\u800c\u975e 8 \u7ebf\u7a0b\uff0c\u5bfc\u81f4\u8be5\u7ebf\u7a0b\u88ab\u6740\u6b7b  </p> <p>\u91cd\u65b0\u67e5\u770b\u7248\u672c\uff0c\u5982\u679c\u51fa\u73b0 cmake \u7248\u672c\u53f7\u5373\u5b89\u88c5\u6210\u529f\uff0c\u5982\u679c <code>cmake --version</code> \u6ca1\u6709\u663e\u793a\u7684\u8bdd\uff0c\u6267\u884c\u4e0b\u9762\u6307\u4ee4</p> <pre><code>sudo cp ./bin/cmake /usr/bin/\n</code></pre> <p>\u6ce8\u610f\uff0c<code>sudo apt remove cmake</code>\u00a0\u547d\u4ee4\u65e0\u6cd5\u5378\u8f7d\u6e90\u7801\u5b89\u88c5\u7684 <code>cmake</code>\u3002 \u5982\u9700\u5378\u8f7d\u6e90\u7801\u5b89\u88c5\u7684<code>cmake</code>\uff0c\u9700\u8981\u8fdb\u5165\u5230\u5b89\u88c5\u65f6\u6267\u884c<code>make install</code>\u65f6\u7684\u8def\u5f84\u4e0b\uff0c \u6267\u884c\u5378\u8f7d\u547d\u4ee4\uff1a</p> <pre><code>sudo make uninstall\n</code></pre>"},{"location":"Linux%20C%2B%2B%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#_4","title":"\u670d\u52a1\u5668\u914d\u7f6e","text":""},{"location":"Linux%20C%2B%2B%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#_5","title":"\u865a\u62df\u673a","text":"<p>\u6ce8\u610f\uff0c\u53ea\u6709\u7279\u5b9a\u578b\u53f7\u7684\u865a\u62df\u673a\u624d\u80fd\u5b89\u88c5 CUDA\uff0c\u4e2a\u4eba\u7b14\u8bb0\u672c\u4e0a\u7684\u663e\u5361\uff08\u5982 RTX3060 \u663e\u5361\uff09\u662f\u4e0d\u652f\u6301\u5728\u865a\u62df\u673a\u4e2d\u4f7f\u7528\u7684\u3002 \u5177\u4f53\u652f\u6301\u578b\u53f7\u89c1\uff1aUbuntu :: NVIDIA Virtual GPU Software Documentation</p> <p>\u914d\u7f6e ssh \u670d\u52a1\uff1a</p> <pre><code>sudo apt-get install openssh-server\nsudo systemctl start ssh\n</code></pre> <p>\u589e\u52a0\u4e00\u4e2a\u7f51\u5361\u4fbf\u4e8e Windows \u4e0e\u865a\u62df\u673a\u4e92\u8fde\uff0c\u6ce8\u610f\u865a\u62df\u673a\u4e2d\u7f51\u5361\u4e0d\u80fd\u8bbe\u7f6e\u4e3a VMNet0\uff0c\u800c\u5e94\u8be5\u8bbe\u7f6e\u4e3a VMnet1\uff0c\u4ece\u800c\u4e0e Windows \u4e2d\u7684 VMNet1 \u5339\u914d  \u914d\u7f6e\u865a\u62df\u673a\u65b0\u7f51\u5361 ip \u5730\u5740\uff1a</p> <pre><code>ifconfig eth0 192.168.1.30\n</code></pre> <p>\u914d\u7f6e Windows \u7f51\u5361 ip \u5730\u5740\u4e3a 192.168.1.40   </p>"},{"location":"Notes%20On%20CUDA%20C%2B%2B%20Programming%20Guide/","title":"Notes On CUDA C++ Programming Guide","text":"<p>\u539f\u6587\u94fe\u63a5\uff1aContents \u2014 CUDA C Programming Guide</p>"},{"location":"Notes%20On%20CUDA%20C%2B%2B%20Programming%20Guide/#1_introduction","title":"1_Introduction","text":"<p>GPU \u548c CPU \u7684\u533a\u522b</p> <p></p> <p>GPU \u7684\u8ba1\u7b97\u5e94\u7528</p> <p></p> <p>CUDA \u5e76\u884c\u7f16\u7a0b\u6a21\u578b\u662f\u4e00\u79cd\u53ef\u62d3\u5c55\u7684\u7f16\u7a0b\u6a21\u578b\uff0c\u5b83\u7684\u6838\u5fc3\u662f\u4e09\u4e2a\u5173\u952e\u7684\u62bd\u8c61\uff1a\u7ebf\u7a0b\u7ec4\uff1b\u5171\u4eab\u5185\u5b58\uff1b\u540c\u6b65\u5c4f\u969c\uff08barrier synchronization\uff09\u3002\u8fd9\u4e09\u4e2a\u62bd\u8c61\u4f7f\u5f97\u7ec6\u7c92\u5ea6\u7684\u6570\u636e\u5e76\u884c\u548c\u7ebf\u7a0b\u5e76\u884c\u5d4c\u5957\u5728\u4e86\u7c97\u7c92\u5ea6\u7684\u6570\u636e\u5e76\u884c\u548c\u4efb\u52a1\u5e76\u884c\u4e2d\u3002</p> <p>\u901a\u8fc7\u7b80\u5355\u7f29\u653e\u591a\u5904\u7406\u5668\u548c\u5185\u5b58\u5206\u533a\u7684\u6570\u91cf\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u53ef\u62d3\u5c55\u7684\u7f16\u7a0b\uff0c\u800c\u4e14\u53ea\u6709 runtime system \u9700\u8981\u77e5\u9053\u7269\u7406\u591a\u5904\u7406\u5668\u6570\u91cf</p> <p> ^5c4cc5</p>"},{"location":"Notes%20On%20CUDA%20C%2B%2B%20Programming%20Guide/#2_programming-model","title":"2_Programming Model","text":"<p>^ca8e6f</p>"},{"location":"Notes%20On%20CUDA%20C%2B%2B%20Programming%20Guide/#21_kernels","title":"2.1_Kernels","text":"<p>kernel \u901a\u8fc7 <code>__global__</code> \u5b9a\u4e49\uff0c\u901a\u8fc7 <code>&lt;&lt;&lt;...&gt;&gt;&gt;</code> \u6307\u5b9a\u914d\u7f6e\u3002\u5e38\u89c4 C++\u51fd\u6570\u53ea\u6267\u884c\u4e00\u6b21\uff0cCUDA C++\u7684\u51fd\u6570 Kernels \u5728 N \u4e2a\u4e0d\u540c\u7684 CUDA \u7ebf\u7a0b\u4e0a\u6267\u884c N \u6b21\u3002\u6267\u884c\u6838\u7684\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u6709\u4e00\u4e2a\u72ec\u4e00\u65e0\u4e8c\u7684\u7ebf\u7a0b ID\u3002  </p> <pre><code>// Kernel definition\n__global__ void VecAdd(float* A, float* B, float* C)\n{\n    int i = threadIdx.x;\n    C[i] = A[i] + B[i];\n}\n\nint main()\n{\n    ...\n    // Kernel invocation with N threads\n    VecAdd&lt;&lt;&lt;1, N&gt;&gt;&gt;(A, B, C);\n    ...\n}\n</code></pre>"},{"location":"Notes%20On%20CUDA%20C%2B%2B%20Programming%20Guide/#22_thread-hierarchy","title":"2.2_Thread Hierarchy","text":"<p><code>threadIdx</code> \u662f\u4e00\u4e2a\u4e09\u5206\u91cf\u5411\u91cf\u3002\u5bf9\u4e8e\u4e00\u4e2a\u4e09\u7ef4\u5c3a\u5bf8\u4e3a $(Dx, Dy, Dz)$ \u7684 thread block, \u7ebf\u7a0b\u7d22\u5f15\u4e3a $(x, y, z)$  \u7684\u7ebf\u7a0b ID \u4e3a $x+y\\cdot Dx+z\\cdot Dx \\cdot Dy$\u3002</p> <p><code>#include &lt;device_launch_parameters.h&gt;</code></p> <pre><code>// Kernel definition\n__global__ void MatAdd(float A[N][N], float B[N][N],\n                       float C[N][N])\n{\n    int i = threadIdx.x;\n    int j = threadIdx.y;\n    C[i][j] = A[i][j] + B[i][j];\n}\n\nint main()\n{\n    ...\n    // Kernel invocation with one block of N * N * 1 threads\n    int numBlocks = 1;\n    dim3 threadsPerBlock(N, N);\n    MatAdd&lt;&lt;&lt;numBlocks, threadsPerBlock&gt;&gt;&gt;(A, B, C);\n    ...\n}\n</code></pre> <p>\u56e0\u4e3a\u4e00\u4e2a block \u4e0a\u7684\u6240\u6709\u7ebf\u7a0b\u8981\u5171\u4eab\u540c\u4e00\u4e2a SM (streaming multiprocessor)\uff0c\u6240\u4ee5\u5728\u76ee\u524d\u7684 GPU \u4e0a\uff0c\u5355\u4e2a thread block\u6700\u591a\u5305\u542b 1024 \u4e2a\u7ebf\u7a0b\u3002</p> <p>Blocks \u540c\u65f6\u4e5f\u4f1a\u88ab\u7ec4\u7ec7\u6210\u4e00\u7ef4\u3001\u4e8c\u7ef4\u6216\u8005\u4e09\u7ef4\u7684\u7ebf\u7a0b\u5757\u7f51\u683c (grid)\uff0c\u5e76\u53ef\u4ee5\u901a\u8fc7\u5185\u7f6e\u53d8\u91cf <code>blockIdx, blockDim</code> \u8bbf\u95ee kernel \u4e2d\u7684\u552f\u4e00\u7d22\u5f15\u3002</p> <p>The number of threads per block and the number of blocks per grid specified in the\u00a0<code>&lt;&lt;&lt;...&gt;&gt;&gt;</code>\u00a0syntax can be of type\u00a0<code>int</code>\u00a0or\u00a0<code>dim3</code>\u3002</p> <pre><code>// Kernel definition\n__global__ void MatAdd(float A[N][N], float B[N][N],\nfloat C[N][N])\n{\n    int i = blockIdx.x * blockDim.x + threadIdx.x;\n    int j = blockIdx.y * blockDim.y + threadIdx.y;\n    if (i &lt; N &amp;&amp; j &lt; N)\n        C[i][j] = A[i][j] + B[i][j];\n}\n\nint main()\n{\n    ...\n    // Kernel invocation\n    dim3 threadsPerBlock(16, 16);\n    dim3 numBlocks(N / threadsPerBlock.x, N / threadsPerBlock.y);\n    MatAdd&lt;&lt;&lt;numBlocks, threadsPerBlock&gt;&gt;&gt;(A, B, C);\n    ...\n}\n</code></pre> <p>\u867d\u7136\u7ebf\u7a0b\u5757\u7684\u5c3a\u5bf8\u53ef\u4ee5\u4efb\u610f\u9009\u62e9\uff0c\u4f46\u901a\u5e38\u8bbe\u7f6e\u4e3a $16\\times 16$\uff08256 threads\uff09\u3002\u7ebf\u7a0b\u5757\u9700\u8981\u80fd\u591f\u72ec\u7acb\u6267\u884c\uff0c\u8fd9\u79cd\u72ec\u7acb\u6027\u4fdd\u8bc1 thread block \u53ef\u4ee5\u4ee5\u4efb\u4f55\u987a\u5e8f\uff08\u5e76\u884c\u6216\u8005\u4e32\u884c\uff09\u5728\u4efb\u4f55\u6570\u91cf\u7684 cores \u4e0a\u8c03\u5ea6\uff08[[#^5c4cc5|Figure3_\u81ea\u52a8\u53ef\u6269\u5c55\u6027]] \uff09\uff0c\u4ece\u800c\u4f7f\u5f97\u7a0b\u5e8f\u80fd\u591f\u968f\u5185\u6838\u6570\u91cf\u800c\u62d3\u5c55\u5e76\u884c\u901f\u5ea6</p> <p>block \u5185\u7684 threads \u53ef\u4ee5\u901a\u8fc7 shared memory \u548c synchronize \u6765\u534f\u8c03\u5185\u5b58\u8bbf\u95ee\u3002\u5185\u7f6e\u51fd\u6570 <code>__syncthreads()</code>\u00a0\u5145\u5f53\u4e00\u4e2a\u5c4f\u969c\uff0cblock \u4e2d\u7684\u6240\u6709\u7ebf\u7a0b\u90fd\u5fc5\u987b\u7b49\u5f85\u5176\u4ed6\u7ebf\u7a0b\u6267\u884c\u5230\u6b64\u5904\u3002</p> <p>\u5171\u4eab\u5185\u5b58\u5e94\u8be5\u662f\u9760\u8fd1\u5904\u7406\u5668\u6838\u5fc3\u7684\u4f4e\u5ef6\u8fdf\u5185\u5b58\uff08\u5f88\u50cf L1 cache\uff09\uff0c<code>__syncthreads()</code>\u00a0\u5e94\u8be5\u662f\u8f7b\u91cf\u7684\u3002</p> <p>\u8fd8\u6709\u4e00\u79cd\u53ef\u9009\u7684\u5c42\u6b21\u7ed3\u6784\u53eb Thread Block Clusters\u3002 #\u5f85\u529e </p> <p></p>"},{"location":"Notes%20On%20CUDA%20C%2B%2B%20Programming%20Guide/#23_memory-hierarchy","title":"2.3_Memory Hierarchy","text":"<p>CUDA \u7ebf\u7a0b\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u8bbf\u95ee\u591a\u79cd\u5185\u5b58\u7a7a\u95f4\u3002\u6b64\u5916\u8fd8\u6709\u4e24\u4e2a\u53ea\u8bfb\u5185\u5b58\u7a7a\u95f4\u53ef\u4f9b\u6240\u6709\u7ebf\u7a0b\u8bbf\u95ee\uff1a\u5e38\u91cf\u5185\u5b58\u7a7a\u95f4\u548c\u7eb9\u7406\u5185\u5b58\u7a7a\u95f4 (the constant and texture memory spaces)</p> <p></p>"},{"location":"Notes%20On%20CUDA%20C%2B%2B%20Programming%20Guide/#24_heterogeneous-programming","title":"2.4_Heterogeneous Programming","text":"<p>CUDA \u7f16\u7a0b\u6a21\u578b\u5047\u8bbe\u4e32\u884c\u4ee3\u7801\u5728\u4e3b\u673a host \u4e0a\u6267\u884c\uff0c\u800c\u5e76\u884c\u4ee3\u7801\uff08CUDA \u7ebf\u7a0b\uff09\u5728\u7269\u7406\u4e0a\u72ec\u7acb\u7684\u8bbe\u5907 device \u4e0a\u6267\u884c\uff0c\u6240\u4ee5\u4e3b\u673a\u548c\u8bbe\u5907\u5206\u522b\u7ef4\u62a4\u81ea\u5df1\u7684\u5185\u5b58\uff08\u4e3b\u673a\u5185\u5b58\u548c\u8bbe\u5907\u5185\u5b58\uff09\u3002\u4e3b\u673a\u7a0b\u5e8f\u7ba1\u7406\u5bf9\u8bbe\u5907\u5185\u6838\u53ef\u89c1\u7684\u5168\u5c40\u3001\u5e38\u91cf\u548c\u7eb9\u7406\u5185\u5b58\u7a7a\u95f4\uff0c\u5305\u62ec\u8bbe\u5907\u5185\u5b58\u7684\u5206\u914d\u548c\u91ca\u653e\uff0c\u4ee5\u53ca\u4e3b\u673a\u548c\u8bbe\u5907\u4e4b\u95f4\u7684\u6570\u636e\u4ea4\u4e92\u3002</p> <p>Unified Memory \u63d0\u4f9b managed memory \u6765\u6865\u63a5\u4e3b\u673a\u548c\u8bbe\u5907\u5185\u5b58\u7a7a\u95f4\u3002managed memory\u53ef\u4ee5\u4ece\u7cfb\u7edf\u4e2d\u7684\u6240\u6709 CPU \u548c GPU \u8bbf\u95ee\uff0c\u4f5c\u4e3a\u5177\u6709\u516c\u5171\u5730\u5740\u7a7a\u95f4\u7684\u5355\u4e2a\u8fde\u8d2f\u5185\u5b58\u6620\u50cf\u3002</p> <p></p>"},{"location":"Notes%20On%20CUDA%20C%2B%2B%20Programming%20Guide/#25_asynchronous-simt-programming-model","title":"2.5_Asynchronous SIMT Programming Model","text":"<p>\u5728 CUDA \u7f16\u7a0b\u6a21\u578b\u4e2d\uff0c\u7ebf\u7a0b\u662f\u8fdb\u884c\u8ba1\u7b97\u6216\u5185\u5b58\u64cd\u4f5c\u7684\u6700\u4f4e\u62bd\u8c61\u5c42\u7ea7\u3002</p> <p>\u5f02\u6b65\u64cd\u4f5c\u88ab\u5b9a\u4e49\u4e3a\u7531 CUDA \u7ebf\u7a0b\u53d1\u8d77\u5e76\u5f02\u6b65\u6267\u884c\u7684\u64cd\u4f5c\uff0c\u5c31\u50cf\u7531\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u6267\u884c\u4e00\u6837\uff0c\u53d1\u8d77\u5f02\u6b65\u64cd\u4f5c\u7684 CUDA \u7ebf\u7a0b\u4e0d\u9700\u8981\u5728\u540c\u6b65\u7ebf\u7a0b\u4e2d\u3002\u5f02\u6b65\u64cd\u4f5c\u4f7f\u7528\u540c\u6b65\u5bf9\u8c61\u6765\u540c\u6b65\u64cd\u4f5c\u7684\u5b8c\u6210\u3002 \u540c\u6b65\u5bf9\u8c61\u53ef\u4ee5\u662f <code>cuda::barrier</code>\u00a0or\u00a0<code>cuda::pipeline</code></p>"},{"location":"Notes%20On%20CUDA%20C%2B%2B%20Programming%20Guide/#26_compute-capability","title":"2.6_Compute Capability","text":"<p>\u8bbe\u5907\u7684\u8ba1\u7b97\u80fd\u529b\u7531\u7248\u672c\u53f7\u8868\u793a\uff0c\u6709\u65f6\u4e5f\u79f0\u4e3a\u201cSM \u7248\u672c\u201d\u3002\u5177\u6709\u76f8\u540c\u4e3b\u8981\u4fee\u8ba2\u53f7\u7684\u8bbe\u5907\u5177\u6709\u76f8\u540c\u7684\u6838\u5fc3\u67b6\u6784\u3002</p>"},{"location":"Notes%20On%20CUDA%20C%2B%2B%20Programming%20Guide/#3_programming-interface","title":"3_Programming Interface","text":"<p>CUDA C++\u7531 C++\u8bed\u8a00\u7684\u4e00\u7ec4\u6700\u5c0f\u6269\u5c55\u548c\u4e00\u4e2a runtime library \u7ec4\u6210\u3002\u6838\u5fc3\u8bed\u8a00\u62d3\u5c55\u5728 [[#^ca8e6f|2_Programming Model]] \u4e2d\u5df2\u7ecf\u4ecb\u7ecd\u4e86\uff0c\u4efb\u4f55\u5305\u542b\u8fd9\u4e9b\u62d3\u5c55\u7684\u6e90\u6587\u4ef6\u5fc5\u987b\u4f7f\u7528 <code>nvcc</code> \u8fdb\u884c\u7f16\u8bd1</p> <p>runtime \u63d0\u4f9b\u5728\u4e3b\u673a\u4e0a\u6267\u884c\u7684 C \u548c C++\u51fd\u6570\uff0c\u7528\u4e8e\u5206\u914d\u548c\u91ca\u653e\u8bbe\u5907\u5185\u5b58\u3001\u5728\u4e3b\u673a\u5185\u5b58\u548c\u8bbe\u5907\u5185\u5b58\u4e4b\u95f4\u4f20\u8f93\u6570\u636e\u3001\u7ba1\u7406\u5177\u6709\u591a\u4e2a\u8bbe\u5907\u7684\u7cfb\u7edf\u7b49\u3002</p>"},{"location":"Notes%20On%20CUDA%20C%2B%2B%20Programming%20Guide/#31_compilation-with-nvcc","title":"3.1_Compilation with NVCC","text":""},{"location":"Notes%20On%20CUDA%20C%2B%2B%20Programming%20Guide/#_1","title":"\u5f85\u529e","text":""},{"location":"Notes%20On%20CUDA%20C%2B%2B%20Programming%20Guide/#32_cuda-runtime","title":"3.2_CUDA Runtime","text":"<p>runtime \u5728 <code>cudart</code> \u5e93\u4e2d\u5b9e\u73b0 \u9759\u6001\u5e93\uff1a<code>cudart.lib</code> (windows) \u6216\u00a0<code>libcudart.a</code> (linux) \u52a8\u6001\u5e93\uff1a<code>cudart.dll</code> (windows)\u00a0\u6216\u00a0<code>libcudart.so</code> (linux)</p> <p>\u5b83\u7684\u6240\u6709\u5165\u53e3\u70b9\u90fd\u4ee5 <code>cuda</code> \u4f5c\u4e3a\u524d\u7f00 </p>"},{"location":"Notes%20On%20CUDA%20C%2B%2B%20Programming%20Guide/#321_initialization","title":"3.2.1_Initialization","text":"<ol> <li>CUDA 12.0 \u4e4b\u540e\uff1a<ul> <li>\u8c03\u7528 <code>cudaInitDevice()</code> and <code>cudaSetDevice()</code> \u4f1a\u521d\u59cb\u5316\u8fd0\u884c\u65f6\u73af\u5883\u4ee5\u53ca\u4e0e\u6307\u5b9a\u8bbe\u5907\u5173\u8054\u7684\u4e3b\u4e0a\u4e0b\u6587 (primary context)\u3002</li> <li>\u5982\u679c\u6ca1\u6709\u663e\u5f0f\u8c03\u7528\u8fd9\u4e9b\u51fd\u6570\uff0c\u8fd0\u884c\u65f6\u5c06\u9ed8\u8ba4\u4f7f\u7528 <code>device 0</code>\uff0c\u5e76\u5728\u9700\u8981\u65f6\u81ea\u52a8\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u4ee5\u4fbf\u5904\u7406\u5176\u4ed6\u8fd0\u884c\u65f6 API \u8bf7\u6c42\u3002</li> </ul> </li> <li>\u6ce8\u610f\uff1a<ul> <li>\u5f53\u4f60\u5728 \u8ba1\u65f6 runtime function \u8c03\u7528\u65f6\uff0c\u6216\u8005\u5728\u89e3\u91ca\u7b2c\u4e00\u6b21\u8c03\u7528\u8fd0\u884c\u65f6\u65f6\u8fd4\u56de\u7684\u9519\u8bef\u4ee3\u7801\u65f6\uff0c\u9700\u8981\u8003\u8651\u4e0a\u8ff0\u521d\u59cb\u5316\u884c\u4e3a\u3002</li> <li>\u539f\u56e0\u662f\uff1a\u521d\u59cb\u5316\u8fc7\u7a0b\u4f1a\u5f15\u5165\u989d\u5916\u7684\u5f00\u9500\uff08\u4f8b\u5982\uff0c\u542f\u52a8\u65f6\u95f4\uff09\uff0c\u800c\u4e14\u5728\u521d\u59cb\u5316\u4e4b\u524d\uff0c\u9519\u8bef\u4ee3\u7801\u53ef\u80fd\u4e0d\u540c\u4e8e\u521d\u59cb\u5316\u4e4b\u540e\u7684\u9519\u8bef\u4ee3\u7801\u3002</li> </ul> </li> <li>CUDA 12.0 \u4e4b\u524d<ul> <li><code>cudaSetDevice()</code> \u4e0d\u4f1a\u521d\u59cb\u5316runtime\u3002\u56e0\u6b64\uff0c\u5f00\u53d1\u8005\u901a\u5e38\u4f1a\u4f7f\u7528 <code>cudaFree(0)</code> \u8fd9\u6837\u7684\u65e0\u64cd\u4f5c\u8c03\u7528\u6765\u663e\u5f0f\u521d\u59cb\u5316\u8fd0\u884c\u65f6\u73af\u5883\u3002</li> <li>\u8fd9\u6837\u505a\u7684\u76ee\u7684\u662f\u5c06\u8fd0\u884c\u65f6\u521d\u59cb\u5316\u4e0e\u5176\u4ed6 API \u6d3b\u52a8\uff08\u4f8b\u5982\u8ba1\u65f6\u3001\u9519\u8bef\u5904\u7406\uff09\u5206\u5f00\uff0c\u4ee5\u4fbf\u66f4\u7cbe\u786e\u5730\u63a7\u5236\u548c\u5206\u6790\u6027\u80fd\u3002</li> </ul> </li> </ol> <p>CUDA Runtime \u4f1a\u4e3a\u7cfb\u7edf\u4e2d\u7684\u6bcf\u4e2a device \u521b\u5efa\u4e00\u4e2a CUDA context\uff0c\u5e76\u5728\u6240\u6709\u4e3b\u673a\u7ebf\u7a0b\u4e4b\u95f4\u5171\u4eab\u3002context \u662f CUDA \u4e2d\u7528\u4e8e\u7ba1\u7406\u8bbe\u5907\u8d44\u6e90\uff08\u5982\u5185\u5b58\u548c\u5185\u6838\u914d\u7f6e\uff09\u7684\u7ed3\u6784\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u6bcf\u4e2a\u8bbe\u5907\u7684\u8fd0\u884c\u73af\u5883\u3002</p>"},{"location":"Notes%20On%20CUDA%20C%2B%2B%20Programming%20Guide/#322_device-memory","title":"3.2.2_Device Memory","text":""},{"location":"Visual%20Studio%20%28VS%29%20%E9%85%8D%E7%BD%AE/","title":"Visual Studio (VS) \u914d\u7f6e","text":"<p>\u5305\u542b\u76ee\u5f55\u3001\u5e93\u76ee\u5f55\u3001\u9644\u52a0\u5305\u542b\u76ee\u5f55\u3001\u9644\u52a0\u5e93\u76ee\u5f55\u3001\u9644\u52a0\u4f9d\u8d56\u9879\u4e4b\u8be6\u89e3_\u9644\u52a0\u5305\u542b\u76ee\u5f55\u548c\u9644\u52a0\u5e93\u76ee\u5f55\u7684\u533a\u522b</p> <p>\u4e09\u7c7b\u6587\u4ef6 <code>.h</code>\uff0c<code>.lib</code>\uff0c<code>.dll</code></p> <p>\u9996\u5148\u6dfb\u52a0\u5de5\u7a0b\u5934\u6587\u4ef6 <code>.h</code>\uff1a </p> <p>\u7136\u540e\u6dfb\u52a0\u5de5\u7a0b\u5f15\u7528\u7684 <code>.lib</code> \u5e93\u8def\u5f84\uff1a  \u540c\u65f6\u6dfb\u52a0\u5de5\u7a0b\u5f15\u7528\u7684 <code>.lib</code> \u6587\u4ef6\u540d </p> <p>\u6700\u540e\u5c06\u52a8\u6001\u94fe\u63a5\u5e93 <code>.dll</code> \u653e\u5728\u53ef\u6267\u884c\u6587\u4ef6 <code>.exe</code> \u76ee\u5f55\u4e0b\uff0c\u4f8b\u5982  \u4e00\u822c\u6765\u8bf4\uff0cbin \u6587\u4ef6\u5939\u90fd\u4f1a\u52a0\u5230\u7cfb\u7edf\u73af\u5883\u53d8\u91cf\u4e2d\uff0c\u4f46\u8fd9\u91cc\u6211\u4eec\u7701\u7565\uff0c\u76f4\u63a5\u653e\u5728\u6587\u4ef6\u76ee\u5f55\u4e0b</p> <p>lib \u5e93\u9ed8\u8ba4\u8def\u5f84\uff1a<code>C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.0\\lib</code></p> <p> </p>"},{"location":"Visual%20Studio%20%28VS%29%20%E9%85%8D%E7%BD%AE/#cuda","title":"CUDA \u914d\u7f6e","text":"<p>CUDA Build Customization </p>"},{"location":"Visual%20Studio%20%28VS%29%20%E9%85%8D%E7%BD%AE/#_1","title":"\u6d4b\u8bd5\u6837\u4f8b","text":"<p>\u6d4b\u8bd5\u6837\u4f8b 1\uff1a\u6253\u5370\u663e\u5361\u914d\u7f6e</p> <pre><code>#include \"cuda_runtime.h\"\n#include \"device_launch_parameters.h\"\n#include &lt;stdio.h&gt;\n\nint main() {\n    int deviceCount;\n    cudaGetDeviceCount(&amp;deviceCount);\n\n    int dev;\n    for (dev = 0; dev &lt; deviceCount; dev++)\n    {\n        int driver_version(0), runtime_version(0);\n        cudaDeviceProp deviceProp;\n        cudaGetDeviceProperties(&amp;deviceProp, dev);\n        if (dev == 0)\n            if (deviceProp.minor = 9999 &amp;&amp; deviceProp.major == 9999)\n                printf(\"\\n\");\n        printf(\"\\nDevice%d:\\\"%s\\\"\\n\", dev, deviceProp.name);\n        cudaDriverGetVersion(&amp;driver_version);\n        printf(\"CUDA\u9a71\u52a8\u7248\u672c:                                   %d.%d\\n\", driver_version / 1000, (driver_version % 1000) / 10);\n        cudaRuntimeGetVersion(&amp;runtime_version);\n        printf(\"CUDA\u8fd0\u884c\u65f6\u7248\u672c:                                 %d.%d\\n\", runtime_version / 1000, (runtime_version % 1000) / 10);\n        printf(\"\u8bbe\u5907\u8ba1\u7b97\u80fd\u529b:                                   %d.%d\\n\", deviceProp.major, deviceProp.minor);\n        printf(\"Total amount of Global Memory:                  %u bytes\\n\", deviceProp.totalGlobalMem);\n        printf(\"Number of SMs:                                  %d\\n\", deviceProp.multiProcessorCount);\n        printf(\"Total amount of Constant Memory:                %u bytes\\n\", deviceProp.totalConstMem);\n        printf(\"Total amount of Shared Memory per block:        %u bytes\\n\", deviceProp.sharedMemPerBlock);\n        printf(\"Total number of registers available per block:  %d\\n\", deviceProp.regsPerBlock);\n        printf(\"Warp size:                                      %d\\n\", deviceProp.warpSize);\n        printf(\"Maximum number of threads per SM:               %d\\n\", deviceProp.maxThreadsPerMultiProcessor);\n        printf(\"Maximum number of threads per block:            %d\\n\", deviceProp.maxThreadsPerBlock);\n        printf(\"Maximum size of each dimension of a block:      %d x %d x %d\\n\", deviceProp.maxThreadsDim[0],\n            deviceProp.maxThreadsDim[1],\n            deviceProp.maxThreadsDim[2]);\n        printf(\"Maximum size of each dimension of a grid:       %d x %d x %d\\n\", deviceProp.maxGridSize[0], deviceProp.maxGridSize[1], deviceProp.maxGridSize[2]);\n        printf(\"Maximum memory pitch:                           %u bytes\\n\", deviceProp.memPitch);\n        printf(\"Texture alignmemt:                              %u bytes\\n\", deviceProp.texturePitchAlignment);\n        printf(\"Clock rate:                                     %.2f GHz\\n\", deviceProp.clockRate * 1e-6f);\n        printf(\"Memory Clock rate:                              %.0f MHz\\n\", deviceProp.memoryClockRate * 1e-3f);\n        printf(\"Memory Bus Width:                               %d-bit\\n\", deviceProp.memoryBusWidth);\n    }\n\n    return 0;\n}\n</code></pre> <p>\u6d4b\u8bd5\u6837\u4f8b 2\uff1a\u5411\u91cf\u76f8\u52a0</p> <pre><code>#include \"cuda_runtime.h\"\n#include \"device_launch_parameters.h\"\n\n#include &lt;stdio.h&gt;\n\ncudaError_t addWithCuda(int *c, const int *a, const int *b, unsigned int size);\n\n__global__ void addKernel(int *c, const int *a, const int *b)\n{\n    int i = threadIdx.x;\n    c[i] = a[i] + b[i];\n}\n\nint main()\n{\n    const int arraySize = 5;\n    const int a[arraySize] = { 1, 2, 3, 4, 5 };\n    const int b[arraySize] = { 10, 20, 30, 40, 50 };\n    int c[arraySize] = { 0 };\n\n    // Add vectors in parallel.\n    cudaError_t cudaStatus = addWithCuda(c, a, b, arraySize);\n    if (cudaStatus != cudaSuccess) {\n        fprintf(stderr, \"addWithCuda failed!\");\n        return 1;\n    }\n\n    printf(\"{1,2,3,4,5} + {10,20,30,40,50} = {%d,%d,%d,%d,%d}\\n\",\n        c[0], c[1], c[2], c[3], c[4]);\n\n    // cudaDeviceReset must be called before exiting in order for profiling and\n    // tracing tools such as Nsight and Visual Profiler to show complete traces.\n    cudaStatus = cudaDeviceReset();\n    if (cudaStatus != cudaSuccess) {\n        fprintf(stderr, \"cudaDeviceReset failed!\");\n        return 1;\n    }\n\n    return 0;\n}\n\n// Helper function for using CUDA to add vectors in parallel.\ncudaError_t addWithCuda(int *c, const int *a, const int *b, unsigned int size)\n{\n    int *dev_a = 0;\n    int *dev_b = 0;\n    int *dev_c = 0;\n    cudaError_t cudaStatus;\n\n    // Choose which GPU to run on, change this on a multi-GPU system.\n    cudaStatus = cudaSetDevice(0);\n    if (cudaStatus != cudaSuccess) {\n        fprintf(stderr, \"cudaSetDevice failed!  Do you have a CUDA-capable GPU installed?\");\n        goto Error;\n    }\n\n    // Allocate GPU buffers for three vectors (two input, one output)    .\n    cudaStatus = cudaMalloc((void**)&amp;dev_c, size * sizeof(int));\n    if (cudaStatus != cudaSuccess) {\n        fprintf(stderr, \"cudaMalloc failed!\");\n        goto Error;\n    }\n\n    cudaStatus = cudaMalloc((void**)&amp;dev_a, size * sizeof(int));\n    if (cudaStatus != cudaSuccess) {\n        fprintf(stderr, \"cudaMalloc failed!\");\n        goto Error;\n    }\n\n    cudaStatus = cudaMalloc((void**)&amp;dev_b, size * sizeof(int));\n    if (cudaStatus != cudaSuccess) {\n        fprintf(stderr, \"cudaMalloc failed!\");\n        goto Error;\n    }\n\n    // Copy input vectors from host memory to GPU buffers.\n    cudaStatus = cudaMemcpy(dev_a, a, size * sizeof(int), cudaMemcpyHostToDevice);\n    if (cudaStatus != cudaSuccess) {\n        fprintf(stderr, \"cudaMemcpy failed!\");\n        goto Error;\n    }\n\n    cudaStatus = cudaMemcpy(dev_b, b, size * sizeof(int), cudaMemcpyHostToDevice);\n    if (cudaStatus != cudaSuccess) {\n        fprintf(stderr, \"cudaMemcpy failed!\");\n        goto Error;\n    }\n\n    // Launch a kernel on the GPU with one thread for each element.\n    addKernel &lt;&lt; &lt;1, size &gt;&gt; &gt; (dev_c, dev_a, dev_b);\n\n    // Check for any errors launching the kernel\n    cudaStatus = cudaGetLastError();\n    if (cudaStatus != cudaSuccess) {\n        fprintf(stderr, \"addKernel launch failed: %s\\n\", cudaGetErrorString(cudaStatus));\n        goto Error;\n    }\n\n    // cudaDeviceSynchronize waits for the kernel to finish, and returns\n    // any errors encountered during the launch.\n    cudaStatus = cudaDeviceSynchronize();\n    if (cudaStatus != cudaSuccess) {\n        fprintf(stderr, \"cudaDeviceSynchronize returned error code %d after launching addKernel!\\n\", cudaStatus);\n        goto Error;\n    }\n\n    // Copy output vector from GPU buffer to host memory.\n    cudaStatus = cudaMemcpy(c, dev_c, size * sizeof(int), cudaMemcpyDeviceToHost);\n    if (cudaStatus != cudaSuccess) {\n        fprintf(stderr, \"cudaMemcpy failed!\");\n        goto Error;\n    }\n\nError:\n    cudaFree(dev_c);\n    cudaFree(dev_a);\n    cudaFree(dev_b);\n\n    return cudaStatus;\n}\n</code></pre> <p><code>.cu</code> \u6587\u4ef6\u4e2d\u5728\u58f0\u660e\u4f7f\u7528 CUDA \u7ebf\u7a0b\u6570\u53ef\u80fd\u5728\uff1a<code>&lt;&lt;&lt; &gt;&gt;&gt;</code> \u7b26\u53f7\u5904\u62a5\u9519\uff0c\u4e0d\u7528\u7ba1\uff0c\u80fd\u591f\u8fd0\u884c\u5c31\u884c\uff0c\u8be5\u7b26\u53f7\u5728 cpp \u6587\u4ef6\u4e2d\u662f\u4e0d\u80fd\u7f16\u8bd1\u7684\uff0c\u4f46\u662f cu \u6587\u4ef6\u7684\u7f16\u8bd1\u65b9\u6cd5\u4e0e cpp \u4e0d\u4e00\u6837\u3002 cpp \u6587\u4ef6\u4e2d\u4e0d\u8981 <code>#include &lt;xxx.cu&gt;</code> \u6587\u4ef6\uff0c\u76f4\u63a5\u58f0\u660e\u51fd\u6570\u5e76\u4f7f\u7528\u3002\u5982\u679c include\uff0c\u76f8\u5f53\u4e8e\u628a <code>.cu</code> \u6587\u4ef6\u4e2d\u7684\u4ee3\u7801\u7528 cpp \u7f16\u8bd1\uff0c&lt;&lt;&lt;&gt;&gt;&gt; \u5219\u4f1a\u62a5\u9519\u3002</p> <p>\u4f8b\u5982</p> <pre><code>/*main.cpp\u6587\u4ef6*/\n\nvoid add(int num);\n\nint main(void)\n{\n    /*\u8c03\u7528CUDA*/\n    add(5000);\n    return 0;\n}\n\n/*add.cu\u6587\u4ef6*/\n/*\u6838\u51fd\u6570\uff08\u8bbe\u5907\u8fd0\u884c\u51fd\u6570\uff09*/\n__global__ void vectorAdd(const float* A, const float* B, float* C, int numElements)\n{\n    int i = blockDim.x * blockIdx.x + threadIdx.x;\n    if (i &lt; numElements)\n    {\n        C[i] = A[i] + B[i] + 10;\n    }\n}\n\n/*\u4e3b\u673a\u51fd\u6570*/\nvoid add(int num)\n{\n    /*\u751f\u6210\u4e3b\u673a\u6570\u7ec4\u5185\u5b58 h_A, h_B, h_C*/\n    int numElements = num;\n    size_t size = numElements * sizeof(float);\n    float* h_A = (float*)malloc(size);\n    float* h_B = (float*)malloc(size);\n    float* h_C = (float*)malloc(size);\n    /*...*/\n\n</code></pre>"},{"location":"cmake%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/","title":"CMake","text":"<p>\u7b14\u8bb0\u914d\u5957\u89c6\u9891\u6559\u7a0b\uff1a\u4ece\u96f6\u5f00\u59cb\u8be6\u7ec6\u4ecb\u7ecdCMake_\u54d4\u54e9\u54d4\u54e9_bilibili \u5b98\u7f51\u5728\u7ebf\u6587\u6863\uff1aDocumentation | CMake \u53c2\u8003\u4e66\u7c4d\uff1a\u524d\u8a00 - \u300aCMake\u83dc\u8c31\uff08CMake Cookbook\u4e2d\u6587\u7248\uff09\u300b</p>"},{"location":"cmake%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/#_1","title":"\u8bf4\u660e","text":"<p>cmake\u7684\u5b9a\u4e49\u662f\u4ec0\u4e48 \uff1f-----\u9ad8\u7ea7\u7f16\u8bd1\u914d\u7f6e\u5de5\u5177</p> <p>\u5f53\u591a\u4e2a\u4eba\u7528\u4e0d\u540c\u7684\u8bed\u8a00\u6216\u8005\u7f16\u8bd1\u5668\u5f00\u53d1\u4e00\u4e2a\u9879\u76ee\uff0c\u6700\u7ec8\u8981\u8f93\u51fa\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u6216\u8005\u5171\u4eab\u5e93\uff08dll\uff0cso\u7b49\u7b49\uff09\u8fd9\u65f6\u5019\u795e\u5668\u5c31\u51fa\u73b0\u4e86-----CMake\uff01</p> <p>\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u901a\u8fc7\u7f16\u8bd1CMakeLists.txt\u6765\u5b8c\u6210\u7684</p> <p>\u5b98 \u65b9\u7f51\u7ad9\u662f www.cmake.org\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee\u5b98\u65b9\u7f51\u7ad9\u83b7\u5f97\u66f4\u591a\u5173\u4e8e cmake \u7684\u4fe1\u606f</p> <p>\u5b66\u4e60CMake\u7684\u76ee\u7684\uff0c\u4e3a\u5c06\u6765\u5904\u7406\u5927\u578b\u7684C/C++/JAVA\u9879\u76ee\u505a\u51c6\u5907</p>"},{"location":"cmake%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/#cmake_1","title":"CMake\u5b89\u88c5","text":"<p>1\u3001\u7edd\u5927\u591a\u6570\u7684 linux \u7cfb\u7edf\u5df2\u7ecf\u5b89\u88c5\u4e86 CMake\uff0c\u6ca1\u6709\u5b89\u88c5\u7684\u8bdd\u53ef\u4ee5\u901a\u8fc7 <code>yum install cmake</code> \u5b89\u88c5 2\u3001Windows \u6216\u67d0\u4e9b\u6ca1\u6709\u5b89\u88c5\u8fc7\u7684 linux \u7cfb\u7edf\uff0c\u53bb http://www.cmake.org/HTML/Download.htm l  \u53ef\u4ee5\u4e0b\u8f7d\u5b89\u88c5</p>"},{"location":"cmake%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/#cmakehelloword","title":"CMake\u4e00\u4e2aHelloWord","text":"<p>1\u3001\u6b65\u9aa4\u4e00\uff0c\u5199\u4e00\u4e2a HelloWord</p> <pre><code>#main.cpp\n#include &lt;iostream&gt;\n\nint main(){\nstd::cout &lt;&lt;  \"hello word\" &lt;&lt; std::endl;\n}\n</code></pre> <p>2\u3001\u6b65\u9aa4\u4e8c\uff0c\u5199 CMakeLists. txt \u6ce8\u610f\u6587\u4ef6\u540d\u8981\u4e25\u683c\u533a\u5206\u5927\u5c0f\u5199</p> <pre><code>#CMakeLists.txt\n\nPROJECT (HELLO)\n\nSET(SRC_LIST main.cpp)\n\nMESSAGE(STATUS \"This is BINARY dir \" ${HELLO_BINARY_DIR})\nMESSAGE(STATUS \"This is SOURCE dir \"${HELLO_SOURCE_DIR})\n\nADD_EXECUTABLE(hello ${SRC_LIST})\n</code></pre> <p>3\u3001\u6b65\u9aa4\u4e09\u3001\u4f7f\u7528 cmake\uff0c\u751f\u6210 makefile \u6587\u4ef6</p> <pre><code>cmake .\n\n\u8f93\u51fa\uff1a\n[root@localhost cmake]# cmake .\nCMake Warning (dev) in CMakeLists.txt:\n  Syntax Warning in cmake code at\n\n    /root/cmake/CMakeLists.txt:7:37\n\n  Argument not separated from preceding token by whitespace.\nThis warning is for project developers.  Use -Wno-dev to suppress it.\n\n-- The C compiler identification is GNU 10.2.1\n-- The CXX compiler identification is GNU 10.2.1\n-- Check for working C compiler: /usr/bin/cc\n-- Check for working C compiler: /usr/bin/cc -- works\n-- Detecting C compiler ABI info\n-- Detecting C compiler ABI info - done\n-- Check for working CXX compiler: /usr/bin/c++\n-- Check for working CXX compiler: /usr/bin/c++ -- works\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- This is BINARY dir /root/cmake\n-- This is SOURCE dir /root/cmake\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /root/cmake\n</code></pre> <p>\u76ee\u5f55\u4e0b\u5c31\u751f\u6210\u4e86\u8fd9\u4e9b\u6587\u4ef6-CMakeFiles, CMakeCache. txt, cmake_install. cmake \u7b49\u6587\u4ef6\uff0c\u5e76\u4e14\u751f\u6210\u4e86 Makefile. \u73b0\u5728\u4e0d\u9700\u8981\u7406\u4f1a\u8fd9\u4e9b\u6587\u4ef6\u7684\u4f5c\u7528\uff0c\u4ee5\u540e\u4f60\u4e5f\u53ef\u4ee5\u4e0d\u53bb\u7406\u4f1a\u3002\u6700\u5173\u952e\u7684\u662f\uff0c\u5b83\u81ea\u52a8\u751f\u6210\u4e86 Makefile.</p> <p>4\u3001\u4f7f\u7528 make \u547d\u4ee4\u7f16\u8bd1</p> <pre><code>root@localhost cmake]# make\nScanning dependencies of target hello\n[100%] Building CXX object CMakeFiles/hello.dir/main.cpp.o\nLinking CXX executable hello\n[100%] Built target hello\n</code></pre> <p>5\u3001\u6700\u7ec8\u751f\u6210\u4e86 Hello \u7684\u53ef\u6267\u884c\u7a0b\u5e8f</p>"},{"location":"cmake%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/#cmake-helloword","title":"CMake \u4e00\u4e2a HelloWord \u7684\u8bed\u6cd5\u4ecb\u7ecd","text":""},{"location":"cmake%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/#project","title":"PROJECT \u5173\u952e\u5b57","text":"<p>\u53ef\u4ee5\u7528\u6765\u6307\u5b9a\u5de5\u7a0b\u7684\u540d\u5b57\u548c\u652f\u6301\u7684\u8bed\u8a00\uff0c\u9ed8\u8ba4\u652f\u6301\u6240\u6709\u8bed\u8a00 <code>PROJECT (HELLO)</code> \u6307\u5b9a\u4e86\u5de5\u7a0b\u7684\u540d\u5b57\uff0c\u5e76\u4e14\u652f\u6301\u6240\u6709\u8bed\u8a00\u2014\u5efa\u8bae <code>PROJECT (HELLO CXX)</code> \u6307\u5b9a\u4e86\u5de5\u7a0b\u7684\u540d\u5b57\uff0c\u5e76\u4e14\u652f\u6301\u8bed\u8a00\u662f C++ <code>PROJECT (HELLO C CXX)</code> \u6307\u5b9a\u4e86\u5de5\u7a0b\u7684\u540d\u5b57\uff0c\u5e76\u4e14\u652f\u6301\u8bed\u8a00\u662f C \u548c C++</p> <p>\u8be5\u6307\u5b9a\u9690\u5f0f\u5b9a\u4e49\u4e86\u4e24\u4e2aCMAKE\u7684\u53d8\u91cf <code>&lt;projectname&gt;_BINARY_DIR</code>\uff0c\u672c\u4f8b\u4e2d\u662f HELLO_BINARY_DIR <code>&lt;projectname&gt;_SOURCE_DIR</code>\uff0c\u672c\u4f8b\u4e2d\u662f HELLO_SOURCE_DIR</p> <p>MESSAGE\u5173\u952e\u5b57\u5c31\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u8005\u4e24\u4e2a\u53d8\u91cf\uff0c\u5f53\u524d\u90fd\u6307\u5411\u5f53\u524d\u7684\u5de5\u4f5c\u76ee\u5f55\uff0c\u540e\u9762\u4f1a\u8bb2\u5916\u90e8\u7f16\u8bd1</p> <p>\u95ee\u9898\uff1a\u5982\u679c\u6539\u4e86\u5de5\u7a0b\u540d\uff0c\u8fd9\u4e24\u4e2a\u53d8\u91cf\u540d\u4e5f\u4f1a\u6539\u53d8 \u89e3\u51b3\uff1a\u53c8\u5b9a\u4e49\u4e24\u4e2a\u9884\u5b9a\u4e49\u53d8\u91cf\uff1a<code>PROJECT_BINARY_DIR</code> \u548c <code>PROJECT_SOURCE_DIR</code>\uff0c\u8fd9\u4e24\u4e2a\u53d8\u91cf\u548c <code>HELLO_BINARY_DIR</code>\uff0c<code>HELLO_SOURCE_DIR</code> \u662f\u4e00\u81f4\u7684\u3002\u6240\u4ee5\u6539\u4e86\u5de5\u7a0b\u540d\u4e5f\u6ca1\u6709\u5173\u7cfb</p>"},{"location":"cmake%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/#set","title":"SET\u5173\u952e\u5b57","text":"<p>\u7528\u6765\u663e\u793a\u7684\u6307\u5b9a\u53d8\u91cf\u7684 <code>SET(SRC_LIST main.cpp)</code>   SRC_LIST \u53d8\u91cf\u5c31\u5305\u542b\u4e86 <code>main.cpp</code> \u4e5f\u53ef\u4ee5 <code>SET(SRC_LIST main.cpp t1.cpp t2.cpp)</code></p>"},{"location":"cmake%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/#message","title":"MESSAGE\u5173\u952e\u5b57","text":"<p>massage \u547d\u4ee4\u5411\u7ec8\u7aef\u8f93\u51fa\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u4fe1\u606f\uff0c\u8d1f\u8d23\u6253\u5370 log \u4e3b\u8981\u5305\u542b\u4e09\u79cd\u4fe1\u606f\uff1a - <code>SEND_ERROR</code>\uff0cCMake\u9519\u8bef\uff0c\u4f1a\u7ee7\u7eed\u6267\u884c\uff0c\u4f46\u662f\u4f1a\u8df3\u8fc7\u751f\u6210\u6784\u5efa\u7cfb\u7edf - <code>STATUS</code>\uff0c\u6bd4\u5982\u63d0\u793a\u5f53\u524d\u4f7f\u7528\u7684\u7f16\u8bd1\u5668 - <code>FATAL_ERROR</code>\uff0cCMake\u81f4\u547d\u9519\u8bef\uff0c\u4f1a\u7ec8\u6b62\u8fdb\u7a0b</p>"},{"location":"cmake%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/#add_executable","title":"ADD_EXECUTABLE\u5173\u952e\u5b57","text":"<p>\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6 <code>ADD_EXECUTABLE(hello ${SRC_LIST})</code> \u751f\u6210\u7684\u53ef\u6267\u884c\u6587\u4ef6\u540d\u662f hello\uff0c\u6e90\u6587\u4ef6\u8bfb\u53d6\u53d8\u91cf SRC_LIST \u4e2d\u7684\u5185\u5bb9 \u4e5f\u53ef\u4ee5\u76f4\u63a5\u5199 <code>ADD_EXECUTABLE(hello main.cpp)</code></p> <p>\u4e0a\u8ff0\u4f8b\u5b50\u53ef\u4ee5\u7b80\u5316\u7684\u5199\u6210</p> <pre><code>PROJECT(HELLO)\nADD_EXECUTABLE(hello main.cpp)\n</code></pre> <p>\u6ce8\u610f\uff1a\u5de5\u7a0b\u540d\u7684 HELLO \u548c\u751f\u6210\u7684\u53ef\u6267\u884c\u6587\u4ef6 hello \u662f\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u7684</p>"},{"location":"cmake%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/#_2","title":"\u8bed\u6cd5\u7684\u57fa\u672c\u539f\u5219","text":"<ul> <li>\u53d8\u91cf\u4f7f\u7528 <code>${}</code> \u65b9\u5f0f\u53d6\u503c\uff0c\u4f46\u662f\u5728 IF \u63a7\u5236\u8bed\u53e5\u4e2d\u662f\u76f4\u63a5\u4f7f\u7528\u53d8\u91cf\u540d</li> <li>\u6307\u4ee4 (\u53c2\u6570 1 \u53c2\u6570 2...) \u53c2\u6570\u4f7f\u7528\u62ec\u5f27\u62ec\u8d77\uff0c\u53c2\u6570\u4e4b\u95f4\u4f7f\u7528\u7a7a\u683c\u6216\u5206\u53f7\u5206\u5f00\u3002\u4ee5\u4e0a\u9762\u7684 ADD_EXECUTABLE \u6307\u4ee4\u4e3a\u4f8b\uff0c\u5982\u679c\u5b58\u5728\u53e6\u5916\u4e00\u4e2a <code>func.cpp</code> \u6e90\u6587\u4ef6\u5c31\u8981\u5199\u6210\uff1a<code>ADD_EXECUTABLE(hello main.cpp func.cpp)</code> \u6216\u8005 <code>ADD_EXECUTABLE(hello main.cpp; func.cpp)</code></li> <li>\u6307\u4ee4\u662f\u5927\u5c0f\u5199\u65e0\u5173\u7684\uff0c\u53c2\u6570\u548c\u53d8\u91cf\u662f\u5927\u5c0f\u5199\u76f8\u5173\u7684\u3002\u4f46\uff0c\u63a8\u8350\u4f60\u5168\u90e8\u4f7f\u7528\u5927\u5199\u6307\u4ee4</li> </ul>"},{"location":"cmake%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/#_3","title":"\u8bed\u6cd5\u6ce8\u610f\u4e8b\u9879","text":"<ul> <li><code>SET(SRC_LIST main.cpp)</code> \u53ef\u4ee5\u5199\u6210 <code>SET(SRC_LIST \u201cmain.cpp\u201d)</code>\uff0c\u5982\u679c\u6e90\u6587\u4ef6\u540d\u4e2d\u542b\u6709\u7a7a\u683c\uff0c\u5c31\u5fc5\u987b\u8981\u52a0\u53cc\u5f15\u53f7</li> <li><code>ADD_EXECUTABLE(hello main)</code> \u540e\u7f00\u53ef\u4ee5\u4e0d\u884c\uff0c\u4ed6\u4f1a\u81ea\u52a8\u53bb\u627e <code>.c</code> \u548c <code>.cpp</code>\uff0c\u6700\u597d\u4e0d\u8981\u8fd9\u6837\u5199\uff0c\u56e0\u4e3a\u53ef\u80fd\u4f1a\u6709\u8fd9\u4e24\u4e2a\u6587\u4ef6 main. cpp \u548c main</li> </ul>"},{"location":"cmake%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/#_4","title":"\u5185\u90e8\u6784\u5efa\u548c\u5916\u90e8\u6784\u5efa","text":"<ul> <li>\u4e0a\u8ff0\u4f8b\u5b50\u5c31\u662f\u5185\u90e8\u6784\u5efa\uff0c\u4ed6\u751f\u4ea7\u7684\u4e34\u65f6\u6587\u4ef6\u7279\u522b\u591a\uff0c\u4e0d\u65b9\u4fbf\u6e05\u7406</li> <li>\u5916\u90e8\u6784\u5efa\uff0c\u5c31\u4f1a\u628a\u751f\u6210\u7684\u4e34\u65f6\u6587\u4ef6\u653e\u5728 build \u76ee\u5f55\u4e0b\uff0c\u4e0d\u4f1a\u5bf9\u6e90\u6587\u4ef6\u6709\u4efb\u4f55\u5f71\u54cd\u5f3a\u70c8\u4f7f\u7528\u5916\u90e8\u6784\u5efa\u65b9\u5f0f\uff0c\u6240\u4ee5\u4e00\u822c\u91c7\u7528\u5916\u90e8\u6784\u5efa\u7684\u65b9\u5f0f</li> </ul>"},{"location":"cmake%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/#_5","title":"\u5916\u90e8\u6784\u5efa\u65b9\u5f0f\u4e3e\u4f8b","text":"<pre><code>//\u4f8b\u5b50\u76ee\u5f55\uff0cCMakeLists.txt\u548c\u4e0a\u9762\u4f8b\u5b50\u4e00\u81f4\n[root@localhost cmake]# pwd\n/root/cmake\n[root@localhost cmake]# ll\ntotal 8\n-rw-r--r--. 1 root root 198 Dec 28 20:59 CMakeLists.txt\n-rw-r--r--. 1 root root  76 Dec 28 00:18 main.cpp\n</code></pre> <ol> <li>\u5efa\u7acb\u4e00\u4e2a build \u76ee\u5f55\uff0c\u53ef\u4ee5\u5728\u4efb\u4f55\u5730\u65b9\uff0c\u5efa\u8bae\u5728\u5f53\u524d\u76ee\u5f55\u4e0b</li> <li>\u8fdb\u5165 build\uff0c\u8fd0\u884c <code>cmake ..</code>    \u5f53\u7136 <code>..</code> \u8868\u793a\u4e0a\u4e00\u7ea7\u76ee\u5f55\uff0c\u4f60\u53ef\u4ee5\u5199 <code>CMakeLists.txt</code> \u6240\u5728\u7684\u7edd\u5bf9\u8def\u5f84\uff0c\u751f\u4ea7\u7684\u6587\u4ef6\u90fd\u5728 build \u76ee\u5f55\u4e0b\u4e86</li> <li>\u5728 build \u76ee\u5f55\u4e0b\uff0c\u8fd0\u884c make \u6765\u6784\u5efa\u5de5\u7a0b</li> </ol> <p>\u6ce8\u610f\u5916\u90e8\u6784\u5efa\u7684\u4e24\u4e2a\u53d8\u91cf 1. <code>HELLO_SOURCE_DIR</code>  \u8fd8\u662f\u5de5\u7a0b\u8def\u5f84 <code>/root/cmake</code> 2. <code>HELLO_BINARY_DIR</code>   \u7f16\u8bd1\u8def\u5f84\u4e5f\u5c31\u662f <code>/root/cmake/bulid</code></p>"},{"location":"cmake%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/#hello-world","title":"\u8ba9Hello World\u770b\u8d77\u6765\u66f4\u50cf\u4e00\u4e2a\u5de5\u7a0b","text":"<ul> <li>\u4e3a\u5de5\u7a0b\u6dfb\u52a0\u4e00\u4e2a\u5b50\u76ee\u5f55 <code>src</code>\uff0c\u7528\u6765\u653e\u7f6e\u5de5\u7a0b\u6e90\u4ee3\u7801</li> <li>\u6dfb\u52a0\u4e00\u4e2a\u5b50\u76ee\u5f55 <code>doc</code>\uff0c\u7528\u6765\u653e\u7f6e\u8fd9\u4e2a\u5de5\u7a0b\u7684\u6587\u6863 <code>hello.txt</code></li> <li>\u5728\u5de5\u7a0b\u76ee\u5f55\u6dfb\u52a0\u6587\u672c\u6587\u4ef6 <code>COPYRIGHT</code>, <code>README</code></li> <li>\u5728\u5de5\u7a0b\u76ee\u5f55\u6dfb\u52a0\u4e00\u4e2a <code>runhello.sh</code> \u811a\u672c\uff0c\u7528\u6765\u8c03\u7528 hello \u4e8c\u8fdb\u5236</li> <li>\u5c06\u6784\u5efa\u540e\u7684\u76ee\u6807\u6587\u4ef6\u653e\u5165\u6784\u5efa\u76ee\u5f55\u7684 bin \u5b50\u76ee\u5f55</li> <li>\u5c06 doc \u76ee\u5f55\u7684\u5185\u5bb9\u4ee5\u53ca <code>COPYRIGHT/README</code> \u5b89\u88c5\u5230 <code>/usr/share/doc/cmake/</code></li> </ul>"},{"location":"cmake%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/#bin","title":"\u5c06\u76ee\u6807\u6587\u4ef6\u653e\u5165\u6784\u5efa\u76ee\u5f55\u7684 bin \u5b50\u76ee\u5f55","text":"<p>\u6bcf\u4e2a\u76ee\u5f55\u4e0b\u90fd\u8981\u6709\u4e00\u4e2a<code>CMakeLists.txt</code>\u8bf4\u660e</p> <pre><code>[root@localhost cmake]# tree\n.\n\u251c\u2500\u2500 build\n\u251c\u2500\u2500 CMakeLists.txt\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 CMakeLists.txt\n    \u2514\u2500\u2500 main.cpp\n</code></pre> <p>\u5916\u5c42 <code>CMakeLists.txt</code></p> <pre><code>PROJECT(HELLO)\nADD_SUBDIRECTORY(src bin)\n</code></pre> <p>src \u4e0b\u7684 <code>CMakeLists.txt</code></p> <pre><code>ADD_EXECUTABLE(hello main.cpp)\n</code></pre>"},{"location":"cmake%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/#add_subdirectory","title":"ADD_SUBDIRECTORY \u6307\u4ee4","text":"<p><code>ADD_SUBDIRECTORY(source_dir [binary_dir] [EXCLUDE_FROM_ALL])</code> - \u8fd9\u4e2a\u6307\u4ee4\u7528\u4e8e\u5411\u5f53\u524d\u5de5\u7a0b\u6dfb\u52a0\u5b58\u653e\u6e90\u6587\u4ef6\u7684\u5b50\u76ee\u5f55\uff0c\u5e76\u53ef\u4ee5\u6307\u5b9a\u4e2d\u95f4\u4e8c\u8fdb\u5236\u548c\u76ee\u6807\u4e8c\u8fdb\u5236\u5b58\u653e\u7684\u4f4d\u7f6e - <code>EXCLUDE_FROM_ALL</code> \u51fd\u6570\u662f\u5c06\u5199\u7684\u76ee\u5f55\u4ece\u7f16\u8bd1\u4e2d\u6392\u9664\uff0c\u5982\u7a0b\u5e8f\u4e2d\u7684 example - <code>ADD_SUBDIRECTORY(src bin)</code>     - \u5c06 <code>src</code> \u5b50\u76ee\u5f55\u52a0\u5165\u5de5\u7a0b\u5e76\u6307\u5b9a\u7f16\u8bd1\u8f93\u51fa (\u5305\u542b\u7f16\u8bd1\u4e2d\u95f4\u7ed3\u679c) \u8def\u5f84\u4e3a <code>bin</code> \u76ee\u5f55     - \u5982\u679c\u4e0d\u8fdb\u884c <code>bin</code> \u76ee\u5f55\u7684\u6307\u5b9a\uff0c\u90a3\u4e48\u7f16\u8bd1\u7ed3\u679c (\u5305\u62ec\u4e2d\u95f4\u7ed3\u679c) \u90fd\u5c06\u5b58\u653e\u5728 <code>build/src</code> \u76ee\u5f55</p>"},{"location":"cmake%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/#_6","title":"\u66f4\u6539\u4e8c\u8fdb\u5236\u7684\u4fdd\u5b58\u8def\u5f84","text":"<p><code>SET</code> \u6307\u4ee4\u91cd\u65b0\u5b9a\u4e49 <code>EXECUTABLE_OUTPUT_PATH</code> \u548c <code>LIBRARY_OUTPUT_PATH</code> \u53d8\u91cf \u6765\u6307\u5b9a\u6700\u7ec8\u7684\u76ee\u6807\u4e8c\u8fdb\u5236\u7684\u4f4d\u7f6e <code>SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)</code> <code>SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)</code></p> <p>\u601d\u8003\uff1a<code>ADD_SUBDIRECTORY</code> \u6307\u4ee4\u52a0\u5728\u54ea\u4e2a <code>CMakeLists.txt</code> \u5f53\u4e2d \u54ea\u91cc\u8981\u6539\u53d8\u76ee\u6807\u5b58\u653e\u8def\u5f84\uff0c\u5c31\u5728\u54ea\u91cc\u52a0\u5165\u4e0a\u8ff0\u7684\u5b9a\u4e49\uff0c\u6240\u4ee5\u5e94\u8be5\u5728 <code>src</code> \u4e0b\u7684 <code>CMakeLists.txt</code> \u4e0b\u5199</p>"},{"location":"cmake%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/#_7","title":"\u5b89\u88c5","text":"<ul> <li>\u4e00\u79cd\u662f\u4ece\u4ee3\u7801\u7f16\u8bd1\u540e\u76f4\u63a5 <code>make install</code> \u5b89\u88c5</li> <li>\u4e00\u79cd\u662f\u6253\u5305\u65f6\u7684\u6307\u5b9a \u76ee\u5f55\u5b89\u88c5\u3002<ul> <li>\u7b80\u5355\u7684\u53ef\u4ee5\u8fd9\u6837\u6307\u5b9a\u76ee\u5f55\uff1a<code>make install DESTDIR=/tmp/test</code></li> <li>\u7a0d\u5fae\u590d\u6742\u4e00\u70b9\u53ef\u4ee5\u8fd9\u6837\u6307\u5b9a\u76ee\u5f55\uff1a<code>./configure \u2013prefix=/usr</code></li> </ul> </li> </ul>"},{"location":"cmake%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/#helloword","title":"\u5982\u4f55\u5b89\u88c5HelloWord","text":"<p>\u4f7f\u7528CMAKE\u4e00\u4e2a\u65b0\u7684\u6307\u4ee4\uff1a<code>INSTALL</code> INSTALL\u7684\u5b89\u88c5\u53ef\u4ee5\u5305\u62ec\uff1a\u4e8c\u8fdb\u5236\u3001\u52a8\u6001\u5e93\u3001\u9759\u6001\u5e93\u4ee5\u53ca\u6587\u4ef6\u3001\u76ee\u5f55\u3001\u811a\u672c\u7b49 \u4f7f\u7528CMAKE\u4e00\u4e2a\u65b0\u7684\u53d8\u91cf\uff1a<code>CMAKE_INSTALL_PREFIX</code></p> <pre><code>// \u76ee\u5f55\u6811\u7ed3\u6784\n[root@localhost cmake]# tree\n.\n\u251c\u2500\u2500 build\n\u251c\u2500\u2500 CMakeLists.txt\n\u251c\u2500\u2500 COPYRIGHT\n\u251c\u2500\u2500 doc\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 hello.txt\n\u251c\u2500\u2500 README\n\u251c\u2500\u2500 runhello.sh\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 CMakeLists.txt\n    \u2514\u2500\u2500 main.cpp\n\n3 directories, 7 files\n</code></pre>"},{"location":"cmake%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/#copyright-readme","title":"\u5b89\u88c5\u6587\u4ef6 COPYRIGHT \u548c README","text":"<p>FILES\uff1a\u6587\u4ef6 <code>INSTALL(FILES COPYRIGHT README DESTINATION share/doc/cmake/)</code> - DESTINATION\uff1a     - \u53ef\u4ee5\u5199\u7edd\u5bf9\u8def\u5f84     - \u53ef\u4ee5\u5199\u76f8\u5bf9\u8def\u5f84\uff0c\u76f8\u5bf9\u8def\u5f84\u5b9e\u9645\u8def\u5f84\u662f\uff1a<code>${CMAKE_INSTALL_PREFIX}/&lt;DESTINATION \u5b9a\u4e49\u7684\u8def\u5f84&gt;</code>         - \u5176\u4e2d <code>CMAKE_INSTALL_PREFIX</code>  \u9ed8\u8ba4\u662f\u5728 <code>/usr/local/</code></p> <p><code>cmake -D CMAKE_INSTALL_PREFIX=/usr</code> \u5728 cmake \u7684\u65f6\u5019\u6307\u5b9a <code>CMAKE_INSTALL_PREFIX</code> \u53d8\u91cf\u7684\u8def\u5f84</p>"},{"location":"cmake%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/#runhello-sh","title":"\u5b89\u88c5\u811a\u672c runhello. sh","text":"<p>PROGRAMS\uff1a\u975e\u76ee\u6807\u6587\u4ef6\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\u5b89\u88c5(\u6bd4\u5982\u811a\u672c\u4e4b\u7c7b) <code>INSTALL(PROGRAMS runhello.sh DESTINATION bin)</code></p> <p>\u8bf4\u660e\uff1a\u5b9e\u9645\u5b89\u88c5\u5230\u7684\u662f /usr/bin</p>"},{"location":"cmake%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/#doc-hellotxt","title":"\u5b89\u88c5 doc \u4e2d\u7684 hello.txt","text":"<ul> <li>\u901a\u8fc7\u5728 doc \u76ee\u5f55\u5efa\u7acb<code>CMakeLists.txt</code>\uff0c\u901a\u8fc7install\u4e0b\u7684file</li> <li>\u76f4\u63a5\u5728\u5de5\u7a0b\u76ee\u5f55\u901a\u8fc7 <code>INSTALL(DIRECTORY doc/ DESTINATION share/doc/cmake)</code> \u5b89\u88c5<ul> <li>DIRECTORY \u540e\u9762\u8fde\u63a5\u7684\u662f\u6240\u5728 Source \u76ee\u5f55\u7684\u76f8\u5bf9\u8def\u5f84</li> </ul> </li> </ul> <p>\u6ce8\u610f\uff1a<code>abc</code> \u548c <code>abc/</code>\u6709\u5f88\u5927\u7684\u533a\u522b - \u76ee\u5f55\u540d\u4e0d\u4ee5/\u7ed3\u5c3e\uff1a\u8fd9\u4e2a\u76ee\u5f55\u5c06\u88ab\u5b89\u88c5\u4e3a\u76ee\u6807\u8def\u5f84\u4e0b\u7684 - \u76ee\u5f55\u540d\u4ee5/\u7ed3\u5c3e\uff1a\u5c06\u8fd9\u4e2a\u76ee\u5f55\u4e2d\u7684\u5185\u5bb9\u5b89\u88c5\u5230\u76ee\u6807\u8def\u5f84</p>"},{"location":"cmake%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/#_8","title":"\u5b89\u88c5\u8fc7\u7a0b","text":"<pre><code>cmake ..\nmake\nmake install\n</code></pre>"},{"location":"cmake%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/#_9","title":"\u9759\u6001\u5e93\u548c\u52a8\u6001\u5e93\u7684\u6784\u5efa","text":"<p>\u4efb\u52a1\uff1a 1. \u5efa\u7acb\u4e00\u4e2a\u9759\u6001\u5e93\u548c\u52a8\u6001\u5e93\uff0c\u63d0\u4f9b HelloFunc \u51fd\u6570\u4f9b\u5176\u4ed6\u7a0b\u5e8f\u7f16\u7a0b\u4f7f\u7528\uff0cHelloFunc \u5411\u7ec8\u7aef\u8f93\u51fa Hello World \u5b57\u7b26\u4e32\u3002 2. \u5b89\u88c5\u5934\u6587\u4ef6\u4e0e\u5171\u4eab\u5e93\u3002</p> <p>\u9759\u6001\u5e93\u548c\u52a8\u6001\u5e93\u7684\u533a\u522b - \u9759\u6001\u5e93\u7684\u6269\u5c55\u540d\u4e00\u822c\u4e3a\u201c.a\u201d\u6216\u201c.lib\u201d\uff1b\u52a8\u6001\u5e93\u7684\u6269\u5c55\u540d\u4e00\u822c\u4e3a\u201c.so\u201d\u6216\u201c.dll\u201d\u3002 - \u9759\u6001\u5e93\u5728\u7f16\u8bd1\u65f6\u4f1a\u76f4\u63a5\u6574\u5408\u5230\u76ee\u6807\u7a0b\u5e8f\u4e2d\uff0c\u7f16\u8bd1\u6210\u529f\u7684\u53ef\u6267\u884c\u6587\u4ef6\u79bb\u5f00\u9759\u6001\u5e93\u540e\u4ecd\u7136\u53ef\u72ec\u7acb\u8fd0\u884c - \u52a8\u6001\u5e93\u5728\u7f16\u8bd1\u65f6\u4e0d\u4f1a\u653e\u5230\u8fde\u63a5\u7684\u76ee\u6807\u7a0b\u5e8f\u4e2d\uff0c\u5373\u53ef\u6267\u884c\u6587\u4ef6\u65e0\u6cd5\u5355\u72ec\u8fd0\u884c\u3002</p>"},{"location":"cmake%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/#_10","title":"\u6784\u5efa\u5b9e\u4f8b","text":"<pre><code>[root@localhost cmake2]# tree\n.\n\u251c\u2500\u2500 build\n\u251c\u2500\u2500 CMakeLists.txt\n\u2514\u2500\u2500 lib\n    \u251c\u2500\u2500 CMakeLists.txt\n    \u251c\u2500\u2500 hello.cpp\n    \u2514\u2500\u2500 hello.h\n</code></pre> <p>hello.h\u4e2d\u7684\u5185\u5bb9</p> <pre><code>#ifndef HELLO_H\n#define Hello_H\n\nvoid HelloFunc();\n\n#endif\n</code></pre> <p>hello.cpp\u4e2d\u7684\u5185\u5bb9</p> <pre><code>#include \"hello.h\"\n#include &lt;iostream&gt;\nvoid HelloFunc(){\n    std::cout &lt;&lt; \"Hello World\" &lt;&lt; std::endl;\n}\n</code></pre> <p>\u9879\u76ee\u4e2d\u7684cmake\u5185\u5bb9</p> <pre><code>PROJECT(HELLO)\nADD_SUBDIRECTORY(lib bin)\n</code></pre> <p>lib \u4e2d CMakeLists. txt \u4e2d\u7684\u5185\u5bb9 - \u7b2c\u4e00\u884c\u5b9a\u4e49\u4e86\u4e00\u4e2a\u53d8\u91cf\uff0c\u53eb LIBHELLO_SRC\uff0c\u8be5\u53d8\u91cf\u91cc\u9762\u653e\u4e86 hello.cpp</p> <pre><code>SET(LIBHELLO_SRC hello.cpp)\nADD_LIBRARY(hello SHARED ${LIBHELLO_SRC})\n</code></pre>"},{"location":"cmake%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/#add_library","title":"ADD_LIBRARY","text":"<p><code>ADD_LIBRARY(hello SHARED ${LIBHELLO_SRC})</code> - hello\uff1a\u5c31\u662f\u6b63\u5e38\u7684\u5e93\u540d\uff0c\u751f\u6210\u7684\u540d\u5b57\u524d\u9762\u4f1a\u52a0\u4e0alib\uff0c\u6700\u7ec8\u4ea7\u751f\u7684\u6587\u4ef6\u662flibhello.so - SHARED\uff0c\u52a8\u6001\u5e93\uff1bSTATIC\uff0c\u9759\u6001\u5e93 - ${LIBHELLO_SRC} \uff1a\u6e90\u6587\u4ef6</p> <p>\u8865\u5145\uff1a\u9759\u6001\u5e93\u7684\u6587\u4ef6\u62d3\u5c55\u540d\u901a\u5e38\u4e3a. lib\uff08Windows\uff09\u6216\u8005. a\uff08Linux\uff09\uff1b\u52a8\u6001\u5e93\u7684\u6587\u4ef6\u62d3\u5c55\u540d\u901a\u5e38\u4e3a. dll (Windows) \u6216\u8005. so\uff08Linux\uff09</p>"},{"location":"cmake%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/#_11","title":"\u540c\u65f6\u6784\u5efa\u9759\u6001\u548c\u52a8\u6001\u5e93","text":"<pre><code>// \u5982\u679c\u7528\u8fd9\u79cd\u65b9\u5f0f\uff0c\u53ea\u4f1a\u6784\u5efa\u4e00\u4e2a\u52a8\u6001\u5e93\uff0c\u4e0d\u4f1a\u6784\u5efa\u51fa\u9759\u6001\u5e93\uff0c\u867d\u7136\u9759\u6001\u5e93\u7684\u540e\u7f00\u662f.a\nADD_LIBRARY(hello SHARED ${LIBHELLO_SRC})\nADD_LIBRARY(hello STATIC ${LIBHELLO_SRC})\n\n// \u4fee\u6539\u9759\u6001\u5e93\u7684\u540d\u5b57\uff0c\u8fd9\u6837\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u6211\u4eec\u5f80\u5f80\u5e0c\u671b\u4ed6\u4eec\u7684\u540d\u5b57\u662f\u76f8\u540c\u7684\uff0c\u53ea\u662f\u540e\u7f00\u4e0d\u540c\u800c\u5df2\nADD_LIBRARY(hello SHARED ${LIBHELLO_SRC})\nADD_LIBRARY(hello_static STATIC ${LIBHELLO_SRC})\n</code></pre>"},{"location":"cmake%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/#set_target_properties","title":"SET_TARGET_PROPERTIES","text":"<p>\u8fd9\u6761\u6307\u4ee4\u53ef\u4ee5\u7528\u6765\u8bbe\u7f6e\u8f93\u51fa\u7684\u540d\u79f0\uff0c\u5bf9\u4e8e\u52a8\u6001\u5e93\uff0c\u8fd8\u53ef\u4ee5\u7528\u6765\u6307\u5b9a\u52a8\u6001\u5e93\u7248\u672c\u548c API \u7248\u672c</p> <p>\u540c\u65f6\u6784\u5efa\u9759\u6001\u548c\u52a8\u6001\u5e93</p> <pre><code>SET(LIBHELLO_SRC hello.cpp)\n\nADD_LIBRARY(hello_static STATIC ${LIBHELLO_SRC})\n\n//\u5bf9hello_static\u7684\u91cd\u540d\u4e3ahello\nSET_TARGET_PROPERTIES(hello_static PROPERTIES  OUTPUT_NAME \"hello\")\n//cmake \u5728\u6784\u5efa\u4e00\u4e2a\u65b0\u7684target \u65f6\uff0c\u4f1a\u5c1d\u8bd5\u6e05\u7406\u6389\u5176\u4ed6\u4f7f\u7528\u8fd9\u4e2a\u540d\u5b57\u7684\u5e93\uff0c\u56e0\u4e3a\uff0c\u5728\u6784\u5efa libhello.so \u65f6\uff0c \u5c31\u4f1a\u6e05\u7406\u6389 libhello.a\nSET_TARGET_PROPERTIES(hello_static PROPERTIES CLEAN_DIRECT_OUTPUT 1)\n\n\nADD_LIBRARY(hello SHARED ${LIBHELLO_SRC})\n\nSET_TARGET_PROPERTIES(hello PROPERTIES  OUTPUT_NAME \"hello\")\nSET_TARGET_PROPERTIES(hello PROPERTIES CLEAN_DIRECT_OUTPUT 1)\n\n</code></pre>"},{"location":"cmake%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/#_12","title":"\u52a8\u6001\u5e93\u7684\u7248\u672c\u53f7","text":"<p>\u4e00\u822c\u52a8\u6001\u5e93\u90fd\u6709\u4e00\u4e2a\u7248\u672c\u53f7\u7684\u5173\u8054</p> <pre><code>libhello.so.1.2\nlibhello.so -&gt;libhello.so.1\nlibhello.so.1-&gt;libhello.so.1.2\n</code></pre> <p>CMakeLists.txt \u63d2\u5165\u5982\u4e0b</p> <pre><code>SET_TARGET_PROPERTIES(hello PROPERTIES VERSION 1.2 SOVERSION 1)\n</code></pre> <p>VERSION \u6307\u4ee3\u52a8\u6001\u5e93\u7248\u672c\uff0cSOVERSION \u6307\u4ee3 API \u7248\u672c\u3002</p>"},{"location":"cmake%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/#_13","title":"\u5b89\u88c5\u5171\u4eab\u5e93\u548c\u5934\u6587\u4ef6","text":"<p>\u672c\u4f8b\u4e2d\u6211\u4eec\u5c06 hello \u7684\u5171\u4eab\u5e93\u5b89\u88c5\u5230<code>&lt;prefix&gt;/lib</code>\u76ee\u5f55\uff0c \u5c06 hello.h \u5b89\u88c5\u5230<code>&lt;prefix&gt;/include/hello</code> \u76ee\u5f55 \u5176\u4e2d <code>ARCHIVE</code> \u7279\u6307\u9759\u6001\u5e93\uff0c<code>LIBRARY</code> \u7279\u6307\u52a8\u6001\u5e93\uff0c<code>RUNTIME</code> \u7279\u6307\u53ef\u6267\u884c\u76ee\u6807\u4e8c\u8fdb\u5236\u3002</p> <pre><code>//\u6587\u4ef6\u653e\u5230\u8be5\u76ee\u5f55\u4e0b\nINSTALL(FILES hello.h DESTINATION include/hello)\n\n//\u4e8c\u8fdb\u5236\uff0c\u9759\u6001\u5e93\uff0c\u52a8\u6001\u5e93\u5b89\u88c5\u90fd\u7528TARGETS\nINSTALL(TARGETS hello hello_static LIBRARY DESTINATION lib ARCHIVE DESTINATION lib)\n</code></pre> <p>\u6ce8\u610f\uff1a \u5b89\u88c5\u7684\u65f6\u5019\uff0c\u6307\u5b9a\u4e00\u4e0b\u8def\u5f84\uff0c\u653e\u5230\u7cfb\u7edf\u4e0b <code>cmake -D CMAKE_INSTALL_PREFIX=/usr ..</code></p>"},{"location":"cmake%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/#_14","title":"\u4f7f\u7528\u5916\u90e8\u5171\u4eab\u5e93\u548c\u5934\u6587\u4ef6","text":"<p>\u51c6\u5907\u5de5\u4f5c\uff0c\u65b0\u5efa\u4e00\u4e2a\u76ee\u5f55\u6765\u4f7f\u7528\u5916\u90e8\u5171\u4eab\u5e93\u548c\u5934\u6587\u4ef6</p> <pre><code>[root@MiWiFi-R4CM-srv cmake3]# tree\n.\n\u251c\u2500\u2500 build\n\u251c\u2500\u2500 CMakeLists.txt\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 CMakeLists.txt\n    \u2514\u2500\u2500 main.cpp\n</code></pre> <p>main.cpp</p> <pre><code>#include &lt;hello.h&gt;\n\nint main(){\n    HelloFunc();\n}\n</code></pre>"},{"location":"cmake%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/#make","title":"\u89e3\u51b3\uff1amake \u540e\u5934\u6587\u4ef6\u627e\u4e0d\u5230\u7684\u95ee\u9898","text":"<p>PS\uff1a<code>include &lt;hello/hello.h&gt;</code>  \u8fd9\u6837include\u662f\u53ef\u4ee5\uff0c\u8fd9\u4e48\u505a\u7684\u8bdd\uff0c\u5c31\u6ca1\u5565\u597d\u8bb2\u7684\u4e86</p> <p>\u5173\u952e\u5b57\uff1a<code>INCLUDE_DIRECTORIES</code> \u8fd9\u6761\u6307\u4ee4\u53ef\u4ee5\u7528\u6765\u5411\u5de5\u7a0b\u6dfb\u52a0\u591a\u4e2a\u7279\u5b9a\u7684\u5934\u6587\u4ef6\u641c\u7d22\u8def\u5f84\uff0c\u8def\u5f84\u4e4b\u95f4\u7528\u7a7a\u683c\u5206\u5272 \u5728<code>CMakeLists.txt</code>\u4e2d\u52a0\u5165\u5934\u6587\u4ef6\u641c\u7d22\u8def\u5f84 <code>INCLUDE_DIRECTORIES(/usr/include/hello)</code></p>"},{"location":"cmake%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/#_15","title":"\u89e3\u51b3\uff1a\u627e\u5230\u5f15\u7528\u7684\u51fd\u6570\u95ee\u9898","text":"<p>\u62a5\u9519\u4fe1\u606f\uff1a<code>undefined reference to HelloFunc()</code></p> <ul> <li>\u5173\u952e\u5b57\uff1a<code>LINK_DIRECTORIES</code> \u6dfb\u52a0\u975e\u6807\u51c6\u7684\u5171\u4eab\u5e93\u641c\u7d22\u8def\u5f84\u6307\u5b9a\u7b2c\u4e09\u65b9\u5e93\u6240\u5728\u8def\u5f84\uff0c<code>LINK_DIRECTORIES(/home/myproject/libs)</code></li> <li>\u5173\u952e\u5b57\uff1a<code>TARGET_LINK_LIBRARIES</code> \u6dfb\u52a0\u9700\u8981\u94fe\u63a5\u7684\u5171\u4eab\u5e93 <code>TARGET_LINK_LIBRARIES</code> \u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u7ed9\u51fa\u52a8\u6001\u94fe\u63a5\u5e93\u7684\u540d\u5b57\u5c31\u884c\u4e86\u3002</li> </ul> <p>\u5728 <code>CMakeLists. txt</code> \u4e2d\u63d2\u5165\u94fe\u63a5\u5171\u4eab\u5e93\uff0c\u5fc5\u987b\u8981\u63d2\u5728 <code>ADD_EXECUTABLE</code> \u7684\u540e\u9762\uff0c <code>TARGET_LINK_LIBRARIES(main libhello.so)</code> </p> <p>\u67e5\u770bmain\u7684\u94fe\u63a5\u60c5\u51b5</p> <pre><code>[root@MiWiFi-R4CM-srv bin]# ldd main \n    linux-vdso.so.1 =&gt;  (0x00007ffedfda4000)\n    libhello.so =&gt; /lib64/libhello.so (0x00007f41c0d8f000)\n    libstdc++.so.6 =&gt; /lib64/libstdc++.so.6 (0x00007f41c0874000)\n    libm.so.6 =&gt; /lib64/libm.so.6 (0x00007f41c0572000)\n    libgcc_s.so.1 =&gt; /lib64/libgcc_s.so.1 (0x00007f41c035c000)\n    libc.so.6 =&gt; /lib64/libc.so.6 (0x00007f41bff8e000)\n    /lib64/ld-linux-x86-64.so.2 (0x00007f41c0b7c000)\n</code></pre> <p>\u94fe\u63a5\u9759\u6001\u5e93 </p> <pre><code>TARGET_LINK_LIBRARIES(main libhello.a)\n</code></pre>"},{"location":"cmake%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/#cmake_include_path-cmake_library_path","title":"\u7279\u6b8a\u7684\u73af\u5883\u53d8\u91cf CMAKE_INCLUDE_PATH \u548c CMAKE_LIBRARY_PATH","text":"<p>\u6ce8\u610f\uff1a\u8fd9\u4e24\u4e2a\u662f\u73af\u5883\u53d8\u91cf\u800c\u4e0d\u662f cmake \u53d8\u91cf\uff0c\u53ef\u4ee5\u5728linux\u7684bash\u4e2d\u8fdb\u884c\u8bbe\u7f6e</p> <p>\u6211\u4eec\u4e0a\u9762\u4f8b\u5b50\u4e2d\u4f7f\u7528\u4e86\u7edd\u5bf9\u8def\u5f84 <code>INCLUDE_DIRECTORIES(/usr/include/hello)</code> \u6765\u6307\u660e include \u8def\u5f84\u7684\u4f4d\u7f6e </p> <p>\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528\u53e6\u5916\u4e00\u79cd\u65b9\u5f0f\uff0c\u4f7f\u7528\u73af\u5883\u53d8\u91cf <code>export CMAKE_INCLUDE_PATH=/usr/include/hello</code> </p> <p>\u8865\u5145\uff1a\u751f\u6210 debug \u7248\u672c\u7684\u65b9\u6cd5\uff0c\u540e\u7eed\u53ef\u4ee5\u4f7f\u7528 GDB \u8c03\u8bd5</p> <pre><code>cmake .. -D CMAKE_BUILD_TYPE=debug\n</code></pre>"},{"location":"cmake%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/#_16","title":"\u5176\u4ed6\u8865\u5145\u6559\u7a0b\u4ee5\u53ca\u53c2\u8003\u8d44\u6599","text":""},{"location":"cmake%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/#cmake_2","title":"CMake \u6d41\u7a0b","text":"<p>\u6ce8\u610f\uff1aCMake \u662f\u6ca1\u6709\u5e26\u7f16\u8bd1\u5de5\u5177\u7684\uff0c\u9700\u8981\u81ea\u5df1\u5b89\u88c5 C++\u7684\u7f16\u8bd1\u5de5\u5177\u3002\u5982 Windows \u4e0b\u7684 MSBuild \u5de5\u5177\u94fe\u6216\u8005\u76f4\u63a5\u5b89\u88c5 Visual Studio\uff0c\u5728 Linux \u4e0b\u5219\u9700\u8981\u5b89\u88c5 gcc \u6216\u8005 clang \u7b49\u7b49\u3002</p>"},{"location":"cmake%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/#configure","title":"\u914d\u7f6e\uff08Configure\uff09","text":"<p>\u547d\u4ee4 <code>cmake -S . -B build</code></p> <p>\u5728\u9879\u76ee\u7684\u6839\u76ee\u5f55\u4e0b\u521b\u5efa CMakeLists. txt \u6587\u4ef6</p> <p>\u5bf9\u4e8e\u4e00\u4e2a\u6700\u7b80\u5355\u7684\u53ea\u5305\u542b\u4e00\u4e2a\u6e90\u6587\u4ef6\u7684\u5de5\u7a0b\uff0c\u4ee5\u4e0b\u4e09\u884c\u5e76\u4e0d\u53ef\u5c11</p> <pre><code>cmake_minimum_required(VERSION 3.25)  \n\nproject(Example)  \n\nadd_executable(Example main.cpp) \n</code></pre> <p>\u968f\u540e\u53ef\u4ee5\u6839\u636e\u8fd9\u4e2a CMakeLists \u6587\u4ef6\u751f\u6210\u76ee\u6807\u5e73\u53f0\u4e0b\u7684\u539f\u751f\u5de5\u7a0b\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u5728 CMake \u4e2d\u53eb\u505a\u201c\u914d\u7f6e\uff08Configure\uff09\u201d</p>"},{"location":"cmake%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/#build","title":"\u6784\u5efa\uff08Build\uff09","text":"<p>\u547d\u4ee4 <code>cmake --build build</code> \u6784\u5efa\u5b8c\u6210\u540e\u4f1a\u8f93\u51fa\u53ef\u6267\u884c\u6587\u4ef6</p> <p>\u590d\u6742\u9879\u76ee\u7684 CMakeLists. txt \u6837\u4f8b</p> <pre><code>cmake_minimum_required(VERSION 3.5)\n\nproject(Blackhole)\n\nlist(APPEND CMAKE_MODULE_PATH ${CMAKE_BINARY_DIR})\nlist(APPEND CMAKE_PREFIX_PATH ${CMAKE_BINARY_DIR})\n\nif(NOT EXISTS \"${CMAKE_BINARY_DIR}/conan.cmake\")\n  message(STATUS \"Downloading conan.cmake from https://github.com/conan-io/cmake-conan\")\n  file(DOWNLOAD \"https://raw.githubusercontent.com/conan-io/cmake-conan/v0.16.1/conan.cmake\"\n                \"${CMAKE_BINARY_DIR}/conan.cmake\"\n                EXPECTED_HASH SHA256=396e16d0f5eabdc6a14afddbcfff62a54a7ee75c6da23f32f7a31bc85db23484\n                TLS_VERIFY ON)\nendif()\n\ninclude(${CMAKE_BINARY_DIR}/conan.cmake)\n\nconan_cmake_configure(REQUIRES imgui/1.86 glfw/3.3.6 glew/2.2.0 glm/0.9.9.8 stb/cci.20210713\n                      GENERATORS cmake_find_package)\n\nconan_cmake_autodetect(settings)\n\nconan_cmake_install(PATH_OR_REFERENCE .\n                    BUILD missing\n                    REMOTE conancenter\n                    SETTINGS ${settings})\n\nfind_package(imgui REQUIRED)\nfind_package(glfw3 REQUIRED)\nfind_package(GLEW REQUIRED)\nfind_package(glm REQUIRED)\nfind_package(stb REQUIRED)\n\nfile(GLOB SRC_FILES\n  \"${PROJECT_SOURCE_DIR}/src/*.h\"\n  \"${PROJECT_SOURCE_DIR}/src/*.cpp\"\n  \"${PROJECT_SOURCE_DIR}/src/*.c\"\n  \"${PROJECT_SOURCE_DIR}/src/*.cc\")\n\nadd_executable(${CMAKE_PROJECT_NAME} ${SRC_FILES})\n\ntarget_link_libraries(${CMAKE_PROJECT_NAME} PRIVATE imgui::imgui)\ntarget_link_libraries(${CMAKE_PROJECT_NAME} PRIVATE glfw)\ntarget_link_libraries(${CMAKE_PROJECT_NAME} PRIVATE GLEW::GLEW)\ntarget_link_libraries(${CMAKE_PROJECT_NAME} PRIVATE glm::glm)\ntarget_link_libraries(${CMAKE_PROJECT_NAME} PRIVATE stb::stb)\n\ntarget_compile_features(${CMAKE_PROJECT_NAME} PRIVATE cxx_std_17)\n\n# Copy assets files after build.\nadd_custom_command(\n  TARGET ${CMAKE_PROJECT_NAME}\n  POST_BUILD\n  COMMAND ${CMAKE_COMMAND} -E copy_directory \"${PROJECT_SOURCE_DIR}/assets\"\n          \"$&lt;TARGET_FILE_DIR:${CMAKE_PROJECT_NAME}&gt;/assets\")\n\nadd_custom_command(\n  TARGET ${CMAKE_PROJECT_NAME}\n  POST_BUILD\n  COMMAND ${CMAKE_COMMAND} -E copy_directory \"${PROJECT_SOURCE_DIR}/shader/\"\n          \"$&lt;TARGET_FILE_DIR:${CMAKE_PROJECT_NAME}&gt;/shader\")\n</code></pre> <p>\u5fae\u8f6f\u5f00\u6e90\u5305\u5de5\u5177\uff1avcpkg</p> <p>\u53c2\u8003\u8d44\u6599\uff1a -  CMake\u5e94\u7528\uff1aCMakeLists.txt\u5b8c\u5168\u6307\u5357 - \u77e5\u4e4e</p>"}]}